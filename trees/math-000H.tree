\import{tt-macros}
% clifford hopf spin tt math draft
\tag{math}
\tag{draft}

% definition theorem lemma construction observation
% convention corollary axiom example exercise proof
% discussion remark notation
% \taxon{}
% \refcardt{lemma}{}{}{}{

% kostecki2011introduction leinster2016basic nakahira2023diagrammatic rosiak2022sheaf

\note{some links for learning shaders}{
  \block{readings}{
    \ul{
      \li{[Ray tracing weekend series](https://raytracing.github.io/) \citek{shirley2024ray1}\citek{shirley2024ray2}\citek{shirley2024ray3} is a good starting point for learning ray tracing.}
      \li{[The Book of Shaders](https://thebookofshaders.com/) \citek{vivo2024book} is a good starting point for learning shaders.
      }
      \li{\citek{glassner1989introduction} is a classic book on ray tracing, now free to download [here](https://www.realtimerendering.com/blog/an-introduction-to-ray-tracing-is-now-free-for-download/).}
      \li{\citek{pharr2023physically} is a complete, illustrative, and physically based ray-tracing renderer book, free to read [on line](https://pbr-book.org/).
      }
      \li{[Autodesk Standard Surface](https://autodesk.github.io/standard-surface/) contains references to many concepts and formulas for surface shaders.}
    }
  }
  \block{libraries and tools}{
    \ul{
      \li{One could use [GlslEditor](https://github.com/patriciogonzalezvivo/glslEditor) (which provides widgets to adjust colors, 1-3D numeric values etc.), [GlslCanvas](https://github.com/patriciogonzalezvivo/glslCanvas) or [glslViewer](https://github.com/patriciogonzalezvivo/glslViewer) to play with the shaders. They are crreated by the authors of \em{The Book of Shaders}.}
      \li{[ShaderMania](https://github.com/markusmoenig/ShaderMania) seems to be a good tool to play with shaders. Similarly there are [Shadertoy](https://www.shadertoy.com/), which has a [VS Code extension](https://github.com/stevensona/shader-toy) and [a basic ThreeJS port](https://threejs.org/manual/#en/shadertoy).}
      \li{[stackgl](https://stack.gl/) provides many packages for using in GLSL. [LYGIA](https://lygia.xyz/) is a similar effort, targeting a wider range of languages: GLSL/HLSL/MSL/WGSL/CUDA, it also has great integration with many tools, including [ObservableJS](https://observablehq.com/@radames/hello-lygia-shader-library).}
      \li{For GA, there are [miniPGA.glsl](https://github.com/enkimute/LookMaNoMatrices/blob/main/src/miniPGA.glsl), [slerp optimization](https://www.shadertoy.com/view/DlGfRK), [Spinor 2d](https://www.shadertoy.com/view/mdjSWD), and [G2 Multivector-Valued Functions](https://www.shadertoy.com/view/wlf3RX). }
      \li{[MPR](https://github.com/mkeeter/mpr) implements \citek{keeter2020massively} on GPU, while [Fidget](https://github.com/mkeeter/fidget) implements it on CPU.}
      \li{[Easy steps to implementing a Shadertoy in React Three Fiber](https://medium.com/@m.mhde96/implementing-a-shadertoy-in-react-three-fiber-eee4541a15b2)}
    }
  }
}
