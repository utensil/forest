\import{macros}
% clifford hopf spin tt ag math draft tech exp notes
\tag{tech}
\tag{notes}
\tag{draft}

\mdnote{some useful keys in Neovim}\verb>>>|
Here are some useful keys that I like using in NeoVim, with [my LunarVim configuration](https://github.com/utensil/forest/blob/main/config.lua):

- help
    - `:map` to see all key mappings
    - `:help key-notation`
    - use `:Lazy` to check on plugins
    - use `:Mason` to check on LSPs
    - `<leader>` and wait to see which key showing some useful mappings
    - `<leader>+L;` to open the dashboard for frequently used actions
    - `<leader>+Lr` to reload the config
    - `<leader>+li` to see LSP informations
- ESC
    - configure CapsLock to ESC from Mac
    - configure `jk` to ESC
- explore file
    - my `<leader>` is the default: space
    - `<leader>+e` to toggle file explorer on the left
    - `<leader>+s+r` to fuzzy find recent files
    - `<leader>+s+f` to fuzzy find files
    - `<leader>+s+t` to grep text in files
- LSP
    - `gd`: go to definition
        - ctrl+click also works, note that it's not cmd+click on mac
    - `gl`: show diagnostics under cursor
    - `<C+o>`: go back, `<C+i>`: go forward
        `:jum` to see the jump history
    - `gf`: go to file
    - `K` : hover, backspace to cancel hover
    - shift+click on URL to open in browser
    - use `:NavBuddy` to navigate the outline
- open file
    - `:e` to open a file
    - `:vs` to open a file on the right
    - `:sp` to open a file on the bottom
- navigating between buffers and windows
    - use `L` for going to next buffer, `H` for previous buffer
    - use `<C-hjkl>` to move between windows
    - use `-`/`=` to resizing, or with `C-` for vertical resizing
- save & quit
    - In VSCode Vim mode, should stick to `cmd+s` for saving, `cmd+w` for closing a tab
    - In NeoVim, prefer to use
        - `<leader>+w` to save
        - `<leader>+c` to close a buffer
        - cautious: `<leader>+q` to close a split window
    - `ZZ` to save and quit
    - `:q!` to quit without saving
    - `:qa` to quit vim when there are multiple windows in vim
- move
    - `gg` for beginning, `G` for end
    - `w`/`b` to move forward/backward by word
    - shift+`w`/`b` to move by space-separated words
    - left `hj` are for left, down; right `kl` are for right, up
        - I can never remember this in my muscle memory
    - `0` to move to the beginning of the line
        - I don't like `^` and `$` because they are difficult to reach
    - pointer finger on `j`, muscle memory for `jkl` but `h` is a little difficult to reach
- move to character
    - `f` + character to move to the next such character
    - `;` and `,` to move to next or previous
- move & edit
    - `i` to enter INSERT mode
    - `A` to append at the end of the line
    - `0i` to insert at the beginning of the line
    - `R` to replace
    - `u` to undo, surprisingly `Ctrl`+`r` to redo
    - `x`/`dw`/`dd` to delete a character/word/line
    - `yyp` to duplicate a line
    - `yw` to copy the current word
- indentation & comment
    - use `V` to enter line visual mode
    - `<`/`>` to unindent/indent
    - `gc` to toggle comment, or `<leader>+/`
- add a number before a command to repeat it, e.g. `3j`, `3W`, `3u` for the impatient
- search
    - `/` to search forward, `n`/`p` to go to next/previous match
    - `?` to search backward
    - `*` to search the word under the cursor
    - remember to press `Enter` after typing the search term
    - use `<leader>+h` to clear the search highlight
    - use `s/before/after/g` to replace all occurrences, remember `%`, otherwise it will only look for the pattern in the current line
    - use `:lua require("spectre").toggle()` to toggle the search and replace panel
        - `<leader>+R` to replace all occurrences
- edits in normal mode (status quo in VSCode Vim mode)
    - select and
        - ✅ delete by `d`/`x`
        - ✅ cut/copy/paste
        - ✅ comment/uncomment
        - ❌ typing
        - ❌ indent/unindent
    - vertical select and
        - ✅ delete
        - ✅ paste
        - ❌ typing
- terminal
    - `ctrl+backslash` to toggle a float terminal without vim motions
        - number + `ctrl+backslash` to toggle the n-th terminal
    - `:term` to open a terminal with vim motions
- git
    - install and use `lazygit`
    - `<leader>+gg` to open lazygit, space to stage/unstage, `c` to commit, `P` to push, `q` to quit
    - `<leader>+gs` to stage the current hunk, `<leader>+gr` to revert the current hunk
    - usually lazygit is good enough, one can also use `:DiffviewOpen` to inspect diff and handle merge conflicts
- Github Actions
    - `<leader>+gh` to open the Github Actions split window
    - `gj` to open the job under cursor, see also [other keys](https://github.com/topaxi/gh-actions.nvim?tab=readme-ov-file#keybindings)
- AI Chats
    - Github Copilot
        - `:CopilotChat` can be triggered by `:Co<tab>C<Tab><CR>`
        - `C-s` to send the prompt
    - Avante
        - `<leader>+aa` to open the chat, use `a` to accept individual suggestions, or `A` to accept all
        - select code and `<leader>+ae` to modify code
- Octo
    - `:Octo <Tab>` to operate on issues and PRs
- Trouble
    - `<leader>+xx` to open the trouble panel at the bottom


Recalled by [VSCode Vim ROADMAP](https://github.com/VSCodeVim/Vim/blob/HEAD/ROADMAP.md).

See also [Vim cheatsheet](https://devhints.io/vim) and [Keybinds overview](https://www.lunarvim.org/docs/beginners-guide/keybinds-overview).

Got to this because of trying Vim mode in Zed lately. Should also check out [zed-101-setup](https://github.com/jellydn/zed-101-setup) for configurations and key maps inspirations.

I have also added more entries during trying out NeoVim.
>>>
