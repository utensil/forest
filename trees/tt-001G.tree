\import{tt-macros}
% clifford hopf spin tt math draft
\tag{tt}

\import{tt-0032}

\let\fun/Fp{
  \patch{\fun/F}{
    [name]{\fF'}
  }
}

\let\fun/Fpp{
  \patch{\fun/F}{
    [name]{\fF''}
  }
}

\let\fun/Gp{
  \patch{\fun/G}{
    [name]{\fG'}
  }
}

\let\fun/Gpp{
  \patch{\fun/G}{
    [name]{\fG''}
  }
}

\let\fun/FG{
  \patch{\functor/comp/new}{
    [fun1]{\fun/F}
    [fun2]{\fun/G}
  }
}

\let\nat/alpha{
  \patch{\nat-transf/new}{
    [dom]{\fun/F}
    [cod]{\fun/Fp}
    [name]{\alpha}
  }
}

\let\nat/beta{
  \patch{\nat-transf/new}{
    [dom]{\fun/G}
    [cod]{\fun/Gp}
    [name]{\beta}
  }
}

\let\nat/vcomp/alpha{
  \patch{\nat-transf/vcomp/new}{
    [dom]{\fun/F}
    [mid]{\fun/Fp}
    [cod]{\fun/Fpp}
    [name1]{\alpha}
    [name2]{\alpha'}
  }
}

\let\nat/hcomp/ab{
  \patch{\nat-transf/hcomp/new}{
    [fun1nat]{\nat/alpha}
    [fun2nat]{\nat/beta}
  }
}

\let\nat/alpha2{
  \patch{\nat-transf/new}{
    [dom]{\fun/Fp}
    [cod]{\fun/Fpp}
    [name]{\alpha'}
  }
}

\let\nat/beta2{
  \patch{\nat-transf/new}{
    [dom]{\fun/Gp}
    [cod]{\fun/Gpp}
    [name]{\beta'}
  }
}

\let\nat/hvcomp/ab{
  \patch{\nat-transf/hvcomp/new}{
    [fun1nat]{\nat/alpha}
    [fun1nat2]{\nat/alpha2}
    [fun2nat]{\nat/beta}
    [fun2nat2]{\nat/beta2}
  }
}

\let\nat/alpha{
  \patch{\nat-transf/new}{
    [dom]{\fun/F}
    [cod]{\fun/Fp}
    [name]{\alpha}
  }
}

\let\obj/Xp{
  \patch{\functor/new}{
    [dom]{\cat/term}
    [cod]{\cat/C}
    [name]{X'}
  }
}

\let\obj/O{
  \patch{\functor/new}{
    [dom]{\cat/term}
    [cod]{\cat/C}
    [name]{O}
  }
}

\let\nat/alphaX{
  \patch{\nat-transf/new}{
    [dom]{\obj/X}
    [cod]{\obj/O}
    [name]{\alpha_X}
  }
}

\let\nat/alphaXp{
  \patch{\nat-transf/new}{
    [dom]{\obj/O}
    [cod]{\obj/Xp}
    [name]{\alpha'_X}
  }
}

\let\nat/alphaX/FG{
  \patch{\nat-transf/new}{
    [dom]{\fun/F}
    [cod]{\fun/G}
    [name]{\alpha_X}
  }
}

\let\nat/f{
  \patch{\nat-transf/new}{
    [dom]{\obj/O}
    [cod]{\obj/Xp}
    [name]{f}
  }
}

\let\naturality/xfg{
  \patch{\naturality/new}{
    [fun1nat]{\nat/alphaX}
    [fun1nat2]{\nat/f}
    [fun2nat]{\nat/alphaX/FG}
    [fun2through]{fun1nat}
  }
}

\let\naturality/xfg/halo{
  \patch{\naturality/xfg}{
    [rest]{
      \node[white halo, fit=(fun1nat)(fun1nat)]{};
      \path[spath/save=guide] (fun1nat2) -- (fun1nat2 -| ne);
          \path[name intersections={of=right and guide, by={rg}}];
      \node[white halo, fit=(fun1nat2)(rg)]{};
    }
  }
}

\let\nat/fp{
  \patch{\nat-transf/new}{
    [dom]{\obj/X}
    [cod]{\obj/O}
    [name]{f}
  }
}

\let\naturality/xfgp{
  \patch{\naturality/new}{
    [fun1nat]{\nat/fp}
    [fun1nat2]{\nat/alphaXp}
    [fun2nat]{\nat/alphaX/FG}
    [fun2through]{fun1nat2}
  }
}

\let\naturality/xfgp/halo{
  \patch{\naturality/xfgp}{
    [rest]{
      \node[white halo, fit=(fun1nat2)(fun1nat2)]{};
      \path[spath/save=guide] (fun1nat) -- (fun1nat -| ne);
          \path[name intersections={of=right and guide, by={rg}}];
      \node[white halo, fit=(fun1nat)(rg)]{};
    }
  }
}

% definition theorem lemma construction observation
% convention corollary axiom example exercise proof
% discussion remark notation
\taxon{notation}\refnotet{string diagrams: functor and natural transformation}{sec. 2}{marsden2014category}{
\p{In string diagrams,}
\ol{
  \li{A \newvocab{functor} #{\fF : \C \to \D} can be represented as an edge, commonly referred to as a wire:
  
    \tikz{
      \fun/F#draw
    }
  
  }

  \li{Functors compose from left to right:
    \tikz{
      \fun/FG#draw
    }
  }

  \li{A \newvocab{natural transformation} #{\alpha : \fF \to \fF'} can be represented as a dot on the wire from top to bottem (the opposite direction of \citek{marsden2014category}, but the same as \citek{sterling2023models}), connecting the two functors :
    \tikz{
      \nat/alpha#draw
    }
  }

  \li{Natural transformations (for the same pair of categories) compose vertically from top to bottem:

    \tikz{
      \nat/vcomp/alpha#draw
    }

  }

  \li{Natural transformations (from different pairs of categories) compose horizontally from left to right:
    \tikz{
      \nat/hcomp/ab#draw
    }
  }

  \li{The two ways of composing natural transformations are related by the \newvocab{interchange law}:
    \tikz{
      \nat/hvcomp/ab#draw
    }

  i.e. ##{(\alpha \cp \alpha') \cp (\beta \cp \beta') = (\alpha \cp \beta) \cp (\alpha' \cp \beta')}
  }

  \li{
    \p{The \newvocab{naturality} in natural transformations is equivalent to the following equality:
    \tikz{
      \naturality/xfg#draw $=$ \naturality/xfgp#draw
    }

    where #{X} and #{X'} are objects in #{\C}, understood as functors from the terminal category #{\id} to #{\C}.
    }

    \collapsed{üëâ}{

    \p{Since a string diagrams is composed from top to bottem, left to right, we can read

    \tikz{
      \naturality/xfg/halo#draw $=$ \naturality/xfgp/halo#draw
    }

    as
    
    ##{(X \cp \fF) \cp (\alpha_X) \cp (f \cp \fG)=(X' \cp \fG) \quad {\large =} \quad (X \cp \fF) \cp (f \cp \fF) \cp (\alpha'_X)=(X' \cp \fG)}

    where each pair of parentheses corresponds to an overlay in the string diagram,

    or with the notation in the opposite direction that is more familiar to most:

    ##{\fG(f) \circ \alpha_X \circ \fF(X) = \fG(X') \quad {\large =} \quad \alpha'_X \circ \fF(f) \circ \fF(X) = \fG(X')}
    
    Note that we read the wire from #{\fF} to #{\fG} as #{\fF} before the natural transformation, but as #{\fG} after the transformation.
    }

    }

    \p{Effectively naturality says that the natural transformation and function #{f} ‚Äúslide past each other‚Äù, and so we can draw them as two parallel wires to illustrate this.
    }
  }
}
}