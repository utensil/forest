\import{macros}
% clifford hopf spin tt ag math draft tech exp notes
\tag{exp}
\tag{tech}

\note{test mermaid}{

\p{We test hybrid markdown with forester markup and mermaid diagrams.}

\p{They should render to a mermaid diagram or fail gracefully as the mermaid source code.}

\p{The following examples are taken from various DeepWiki generated by AI.}

\mermaid\verb>>>|

graph TD
    RaftNode["raftNode"] --> WAL["Write-Ahead Log (WAL)"]
    RaftNode --> MemoryStorage["raft.MemoryStorage"]
    MemoryStorage --> Snapshot["snap.Snapshotter"]
    WAL --> DiskStorage["Storage on Disk"]
    Snapshot --> DiskStorage

    subgraph "Log Compaction"
        Snapshot -->|"Creates"| SnapshotFile["Snapshot File"]
        SnapshotFile -->|"Allows truncation of"| WAL
    end

>>>

\mermaid\verb>>>|

sequenceDiagram
    participant Client as Client Application
    participant ClientLib as clientv3 Library
    participant Server as EtcdServer
    participant Auth as AuthStore
    participant MVCC as MVCC Store
    participant Raft as Raft Node
    participant WAL as Write-Ahead Log
    participant Backend as bbolt Backend

    Client->>ClientLib: Operation (Put/Get/Delete)
    ClientLib->>Server: gRPC Request

    alt Read Operation (Serializable)
        Server->>Auth: IsRangePermitted
        Auth-->>Server: Permission Result
        Server->>MVCC: Range
        MVCC->>Backend: Read from storage
        Backend-->>MVCC: Return data
        MVCC-->>Server: Return result
    else Read Operation (Linearizable)
        Server->>Server: linearizableReadNotify
        Server->>Raft: ReadIndex
        Raft-->>Server: ReadIndex response
        Server->>Auth: IsRangePermitted
        Auth-->>Server: Permission Result
        Server->>MVCC: Range
        MVCC->>Backend: Read from storage
        Backend-->>MVCC: Return data
        MVCC-->>Server: Return result
    else Write Operation
        Server->>Server: raftRequest
        Server->>Raft: Process (Propose)
        Raft->>WAL: Record proposal
        Raft->>Raft: Reach consensus
        Raft-->>Server: Committed entry
        Server->>Auth: Check permissions
        Auth-->>Server: Permission Result
        Server->>MVCC: Apply changes
        MVCC->>Backend: Write to storage
        Backend-->>MVCC: Confirm write
        MVCC-->>Server: Return result
    end

    Server-->>ClientLib: gRPC Response
    ClientLib-->>Client: Operation Result

>>>
}
