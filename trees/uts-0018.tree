\import{macros}
% clifford hopf spin tt ag math draft tech exp notes readings
\tag{root}
% \meta{permlink}{reading-diary}

\put\transclude/numbered{false}

\loadjs{activity.js}

\note{learning diary}{
\p{I wish to keep a learning diary, to keep track of partial reading progress, and things learned during making things.
}

\<html:div>[id]{learning-activity}{}

\subtree[2025]{
\title{Year 2025}

\subtree[2025-05]{
\title{May, 2025}

% realized that I can open links in NeoVim by Cmd+Shift+Click
% tried [Ente Photos v1](https://ente.io/blog/v1)

\mdblock{2025-05-23}{
- read [Why I love OCaml](https://mccd.space/posts/ocaml-the-worlds-best/)
- read [How to Get Your Research Paper Accepted](https://maxwellforbes.com/posts/how-to-get-a-paper-accepted)
- read [Fork Union: Beyond OpenMP in C++ and Rust?](https://ashvardanian.com/posts/beyond-openmp-in-cpp-rust/)
- found languages
    - [Wren](https://wren.io/), a small, fast, class-based concurrent scripting language
        - "Think Smalltalk in a Lua-sized package with a dash of Erlang and wrapped up in a familiar, modern syntax."
        - [Talon](https://github.com/jossephus/talon): Write Raylib programs in Wren
    - [Picat](https://picat-lang.org/), a rule-based language, in which predicates, functions, and actors are defined with pattern-matching rules
        - from [Finding hard 24 puzzles with planner programming](https://buttondown.com/hillelwayne/archive/finding-hard-24-puzzles-with-planner-programming/)
            - "the only language that I know has a built-in planner module"
    - [Dark](https://darklang.com/), a serverless backend language
    - [Roto](https://github.com/NLnetLabs/roto)
        - from [Introducing Roto: A Compiled Scripting Language for Rust](https://blog.nlnetlabs.nl/introducing-roto-a-compiled-scripting-language-for-rust/)
    - [Janet](https://janet-lang.org/)
- found papers (TODO: skim, classify, and filter)
    - [AceReason-Nemotron: Advancing Math and Code Reasoning through Reinforcement Learning](https://huggingface.co/papers/2505.16400)
    - [Date Fragments: A Hidden Bottleneck of Tokenization for Temporal Reasoning](https://huggingface.co/papers/2505.16088)
    - [Dimple: Discrete Diffusion Multimodal Large Language Model with Parallel Decoding](https://huggingface.co/papers/2505.16990)
    - [GRIT: Teaching MLLMs to Think with Images](https://huggingface.co/papers/2505.15879)
    - [LaViDa: A Large Diffusion Language Model for Multimodal Understanding](https://huggingface.co/papers/2505.16839)
    - [NovelSeek: When Agent Becomes the Scientist -- Building Closed-Loop System from Hypothesis to Verification](https://huggingface.co/papers/2505.16938)
    - [Reinforcement Learning Finetunes Small Subnetworks in Large Language Models](https://huggingface.co/papers/2505.11711)
    - [Risk-Averse Reinforcement Learning with Itakura-Saito Loss](https://huggingface.co/papers/2505.16925)
    - [SPhyR: Spatial-Physical Reasoning Benchmark on Material Distribution](https://huggingface.co/papers/2505.16048)
    - [Scaling Diffusion Transformers Efficiently via Î¼P](https://huggingface.co/papers/2505.15270)
    - [Steering Large Language Models for Machine Translation Personalization](https://huggingface.co/papers/2505.16612)
    - [Tool-Star: Empowering LLM-Brained Multi-Tool Reasoner via Reinforcement Learning](https://huggingface.co/papers/2505.16410)
    - [Training-Free Reasoning and Reflection in MLLMs](https://huggingface.co/papers/2505.16151)
    - [Understanding Generative AI Capabilities in Everyday Image Editing Tasks](https://huggingface.co/papers/2505.16181)
    - [Audio Jailbreak: An Open Comprehensive Benchmark for Jailbreaking Large Audio-Language Models](https://huggingface.co/papers/2505.15406)
    - [Diffusion vs. Autoregressive Language Models: A Text Embedding Perspective](https://huggingface.co/papers/2505.15045)
    - [MMaDA: Multimodal Large Diffusion Language Models](https://huggingface.co/papers/2505.15809)
    - [RLVR-World: Training World Models with Reinforcement Learning](https://huggingface.co/papers/2505.13934)
    - [Prior Prompt Engineering for Reinforcement Fine-Tuning](https://huggingface.co/papers/2505.14157)
    - [Scaling Law for Quantization-Aware Training](https://huggingface.co/papers/2505.14302)
    - [Using Large Language Models for Commit Message Generation: A Preliminary Study](https://arxiv.org/abs/2401.05926)
    - [dKV-Cache: The Cache for Diffusion Language Models](https://huggingface.co/papers/2505.15781)
    - [This Time is Different: An Observability Perspective on Time Series Foundation Models](https://huggingface.co/papers/2505.14766)
    - [Neurosymbolic Diffusion Models](https://huggingface.co/papers/2505.13138)
    - [Phare: A Safety Probe for Large Language Models](https://huggingface.co/papers/2505.11365)
    - [A Token is Worth over 1,000 Tokens: Efficient Knowledge Distillation through Low-Rank Clone](https://huggingface.co/papers/2505.12781)
    - [The Distracting Effect: Understanding Irrelevant Passages in RAG](https://huggingface.co/papers/2505.06914)
    - [Fine-tuning Quantized Neural Networks with Zeroth-order Optimization](https://huggingface.co/papers/2505.13430)
    - [Hunyuan-Game: Industrial-grade Intelligent Game Creation Model](https://huggingface.co/papers/2505.14135)
}

\mdblock{2025-05-22}{
- read [Adventures in Symbolic Algebra with Model Context Protocol](https://www.stephendiehl.com/posts/computer_algebra_mcp/)
    - maybe I should create MCP for GAlgebra
- read [Transpiler is a meaningless word (2023)](https://people.csail.mit.edu/rachit/post/transpiler/)
    - maybe that means I should give up on the idea that I could build a Forester transpiler
- found [Obsidian Bases](https://mas.to/@obsidian/114546538858212821)
}

\mdblock{2025-05-21}{
- read [If composers were hackers](https://mmapped.blog/posts/18-if-composers-were-hackers)
- found [Litestream: Revamped](https://fly.io/blog/litestream-revamped/), making SQLite apps reliably recoverable from object storage
- read [The Ingredients of a Productive Monorepo](https://blog.swgillespie.me/posts/monorepo-ingredients/)
}

\mdblock{2025-05-20}{
- read [Not causal chains, but interactions and adaptations](https://surfingcomplexity.blog/2025/05/19/not-causal-chains-but-interactions-and-adaptations/)
    - RCA(root cause analysis) model v.s. RE(resilience engineering) model, for incidents
- read [Open Source Can't Coordinate](https://matklad.github.io/2025/05/20/open-source-cant-coordinate.html)
- read [Particle Life simulation in browser using WebGPU](https://lisyarus.github.io/blog/posts/particle-life-simulation-in-browser-using-webgpu.html)
}

\mdblock{2025-05-19}{
- read [Agent Recursion](https://choly.ca/post/agent-recursion/)
- read [Semgrep: AutoFixes using LLMs](https://choly.ca/post/semgrep-autofix-llm/)
    - found a few alternatives to `semgrep`, e.g. [ast-grep](https://ast-grep.github.io/)
- read [Adding Mastodon Comments to your Blog](https://beej.us/blog/data/mastodon-comments/)
    - [Mastodon as comment system for your static blog](https://danielpecos.com/2022/12/25/mastodon-as-comment-system-for-your-static-blog/)
    - [My blog now has Lemmy comments](https://blog.coship.fyi/blog/lemmy-comments/)
    - learn about [Glasp: Highlight the Internet & Build Your AI Clone](https://glasp.co/)
- read [async/await versus the Calloop Model](https://notgull.net/calloop/)
- read [Mimalloc Cigarette: Losing one week of my life catching a memory leak](https://pwy.io/posts/mimalloc-cigarette/)
- read [Ditching Obsidian and building my own](https://amberwilliams.io/blogs/building-my-own-pkms)
- found [Qwen3 Technical Report](https://huggingface.co/papers/2505.09388)
- found [TestDesiderata](https://testdesiderata.com/)
- found [macOS VMs in a Docker Container](https://github.com/trycua/cua/tree/main/libs/lumier)
}

\mdblock{2025-05-18}{
- found [Algorithms by Jeff Erickson (2019)](https://jeffe.cs.illinois.edu/teaching/algorithms)
- read \citef{van2025comparing}
    - learned that APL can run on GPU via [Dyalog](https://www.dyalog.com/), the paper even discussed a flash attention implementation
    - [BQN](https://razetime.github.io/learnxinyminutes-docs/bqn) [doesn't](https://mlochbaum.github.io/BQN/implementation/codfns.html) seem to run on GPU
    - it might be interesting to use [arrayfire](https://arrayfire.com/) [C API](https://arrayfire.org/docs/gettingstarted.htm#gettingstarted_api_usage), even [on Mac](https://arrayfire.org/docs/using_on_osx.htm)
    - prefer [tilelang](https://github.com/tile-ai/tilelang) to DaCe
- found [A JavaScript library for building parsers, interpreters, compilers, and more](https://ohmjs.org/)
- read [Layers All The Way Down: The Untold Story of Shader Compilation](https://moonside.games/posts/layers-all-the-way-down/)
    - introduces the motivation behind [MojoShader](https://github.com/icculus/mojoshader), from Direct3D HLSL bytecode or assembly source to other shader languages
- found [Mystical](https://suberic.net/~dmm/projects/mystical/README.html), a programming language that resembled magical circles
- read [Bare Metal Zig (2023)](https://austinhanson.com/bare-metal-ziglang/)
- read [Google Scholar is manipulatable](https://arxiv.org/abs/2402.04607)
- found [Path Integrals in Quantum Mechanics, Statistics, Polymer Physics, and Financial Markets by Hagen Kleinert](https://hagenkleinert.de/documents/pi/HagenKleinert_PathIntegrals.pdf)
}

\mdblock{2025-05-17}{
- read [Parallel Scaling Law for Language Models](https://huggingface.co/papers/2505.10475)
- read [The Language That Never Was](https://blog.celes42.com/the_language_that_never_was.html)
    - [Leaving Rust gamedev after 3 years](https://loglog.games/blog/leaving-rust-gamedev/)
    - [Mun](https://mun-lang.org/)
    - [jank](https://jank-lang.org/)
    - [The Little Book of Rust Macros](https://veykril.github.io/tlborm/)
    - [MonoGame](https://monogame.net/)
- read [Using unwrap() in Rust is Okay](https://burntsushi.net/unwrap/)
    - `anyhow` for applications and [thiserror](https://github.com/dtolnay/thiserror) for libraries
- found [GNU Parallel Examples](https://www.gnu.org/software/parallel/parallel_examples.html)
- found [Lua for Elixir](https://davelucia.com/blog/lua-elixir)
- found [OCaml Web Development: Essential Tools and Libraries in 2025](https://tarides.com/blog/2025-05-15-ocaml-web-development-essential-tools-and-libraries-in-2025/)
- found [Teal: a statically-typed dialect of Lua](https://teal-language.org/), a statically-typed dialect of Lua
}

\mdblock{2025-05-16}{
- read [I donât like NumPy](https://dynomight.net/numpy/)
    - [Writing a better code with pytorch and einops](https://einops.rocks/pytorch-examples.html)
    - [Einops and Einsum Summarized](https://pratik-doshi-99.github.io/posts/einops/)
- looking for Zig way to implement eiops
    - [Interesting (mis-)use cases for comptime](https://www.reddit.com/r/Zig/comments/124shks/interesting_misuse_cases_for_comptime/)
        - [zig-infix-parser](https://github.com/markisus/zig-infix-parser)
    - [Zig Comptime is amazing](https://ziggit.dev/t/zig-comptime-is-amazing/832)
        - [ZEIN](https://github.com/andrewCodeDev/ZEIN), Zig-based implementation of general-rank tensors
        - [Functional Programming in Zig](https://gitlab.com/zigurust/fp)
        - [What is Zig's Comptime?](https://kristoff.it/blog/what-is-zig-comptime/)
        - [comath: comptime math](https://github.com/InKryption/comath), used by [zilliam](https://github.com/ymndoseijin/zilliam)
        - [alg](https://github.com/Laremere/alg), Algebra for Zig
        - [mecha](https://github.com/Hejsil/mecha), A parser combinator library for Zig
            - from [Zig, Parser Combinators - and Why They're Awesome](https://devlog.hexops.com/2021/zig-parser-combinators-and-why-theyre-awesome/)
        - [parcom](https://github.com/dokwork/parcom), see also [this blog post](https://zig.news/vladimir_popov/yet-another-parser-combinators-library-ic2)
    - [einops](https://github.com/VasanthakumarV/einops) in Rust, with only backend `tch`
    - [Einsums](https://github.com/Einsums/Einsums) and [einops-cpp](https://github.com/dorpxam/einops-cpp) are in C++
- read [The current state of TLAâº development](https://ahelwer.ca/post/2025-05-15-tla-dev-status/)
    - found [Spectacle](https://informal.systems/) and [tlafmt](https://github.com/domodwyer/tlafmt)
- read [10 Years of Stable Rust: An Infrastructure Story](https://rustfoundation.org/media/10-years-of-stable-rust-an-infrastructure-story/)
    - read [formal methods projects built on Rust](https://rust-formal-methods.github.io/)
- read [Beyond 'Aha!': Toward Systematic Meta-Abilities Alignment in Large Reasoning Models](https://huggingface.co/papers/2505.10554)
- read [Declaring a friendship to self](https://www.sandordargo.com/blog/2025/05/14/friend-self)
- read [Internet Artifacts](https://neal.fun/internet-artifacts/irc/)
    - discovered [Helicopter game](https://neal.fun/internet-artifacts/helicopter-game/)
}

\mdblock{2025-05-15}{
- read [Introducing oniux: Kernel-level Tor isolation for any Linux app](https://blog.torproject.org/introducing-oniux-tor-isolation-using-linux-namespaces/)
    - [code](https://gitlab.torproject.org/tpo/core/oniux)
    - found [smoltcp](https://github.com/smoltcp-rs/smoltcp)
- read [The cryptography behind passkeys](https://blog.trailofbits.com/2025/05/14/the-cryptography-behind-passkeys/)
- read [How fast is CeTZ-Plot?](https://huijzer.xyz/posts/12)
- read [ZJIT has been merged into Ruby](https://railsatscale.com/2025-05-14-merge-zjit/)
    - Instead of compiling YARV bytecode directly to the low-level IR (LIR), it uses an high-level SSA-based intermediate representation (HIR)
        - In the bytecode, which is tersely encoded, jumps are offsets, some control-flow is implicit, and most dataflow is via the stack.
        - By contrast, HIR looks more like a graph. Jumps have pointers to their targets and thereâs no stack: instructions that use data have pointers directly to the instructions that create the data.
- found [Warteschlangensimulator](https://a-herzog.github.io/Warteschlangensimulator/), a event-driven, stochastic simulator for queueing systems
- found [kowk](https://kwok.sigs.k8s.io/), a ~100k-pod k8s cluster simulator
- read [Data is code](https://blog.information-superhighway.net/data-is-code), about philosophy behind Forth
    - also [What the hell is Forth?](https://blog.information-superhighway.net/what-the-hell-is-forth)
- found [Insights into DeepSeek-V3: Scaling Challenges and Reflections on Hardware for AI Architectures](https://huggingface.co/papers/2505.09343)
- found [Marigold: Affordable Adaptation of Diffusion-Based Image Generators for Image Analysis](https://huggingface.co/papers/2505.09358)
    - read [Marigold Computer Vision](https://huggingface.co/docs/diffusers/using-diffusers/marigold_usage)
- read [Zig App Release and Updates via Github â¡](https://dbushell.com/2025/03/18/zig-app-release-and-updates-via-github/)
}

\mdblock{2025-05-14}{
- try [genspark](https://www.genspark.ai/agents?id=0cb4084a-b9ba-4755-8f00-029ddf087680)
    - impressive result
    - one deep research per day for free
- read [Read the Code, Not the Profile](https://reasonablypolymorphic.com/blog/read-the-code/)
    - Dramatic percentages in software is just linear improvement
- read [Writing that changed how I think about PL](https://bernsteinbear.com/blog/pl-writing/)
- read [Experiment on your code freely with Git worktree](https://opensource.com/article/21/4/git-worktree)
- read [Lock-Free Rust: How to Build a Rollercoaster While Itâs on Fire](https://yeet.cx/blog/lock-free-rust/)
- found
    - [Spall: a code profiler that runs in your browser](https://gravitymoth.com/spall/spall-web.html)
    - TUI for search & replace
        - [scooter](https://terminaltrove.com/scooter/): Interactive find and replace in the terminal
        - [serpl](https://github.com/yassinebridi/serpl): A simple terminal UI for search and replace, ala VS Code.
        - scooter wins as it supports filtering files, both support regex and replace preview
    - [Avian Physics 0.3](https://joonaa.dev/blog/08/avian-0-3)
    - [Makepad 1.0 : Rust UI Framework](https://makepad.nl/)
- checked out [YS â YAML Done Wisely](https://yamlscript.org/)
    - I wish to use it as a template engine, but the scripting syntax is not delicious
- read [Two months in Servo: CSS nesting, Shadow DOM, Clipboard API, and more](https://servo.org/blog/2025/05/09/this-month-in-servo/)
    - Servo is still very actively growing
- read [Misadventures in DTrace: how to debug the macOS kernel](https://jade.fyi/blog/misadventures-in-dtrace/)
    - I need to compare more with eBPF and DTrace
    - found [DTrace book](https://illumos.org/books/dtrace/preface.html)
}

\mdblock{2025-05-12}{
- read [Are We Serious About Using TLA+ For Statistical Properties?](https://emptysqua.re/blog/are-we-serious-about-statistical-properties-tlaplus/)
    - found [FizzBee](https://fizzbee.io/) for behavior correctness verification and performance modelling, based on simulation
    - I've wished for a tool like this for a long time
    - see also [Modular verification of MongoDB Transactions using TLA+](http://muratbuffalo.blogspot.com/2025/05/modular-verification-of-mongodb.html)
- read [Flattening Rust's Learning Curve](https://corrode.dev/blog/flattening-rusts-learning-curve/)
    - read [The best open source project for someone might not be yours, and that's OK](https://blog.petdance.com/2018/01/02/the-best-open-source-project-for-someone-might-not-be-yours-and-thats-ok/)
- read [A review of documentation in the Rust ecosystem](https://www.harudagondi.space/blog/rust-documentation-ecosystem-review/)
    - found [Blessed.rs](https://blessed.rs/crates): Recommended Crate Directory
- read [Secure by Design: Googleâs Perspective on Memory Safety (2024)](https://storage.googleapis.com/gweb-research2023-media/pubtools/7665.pdf)
- read [Microservices Are a Tax Your Startup Probably Canât Afford](https://nexo.sh/posts/microservices-for-startups/)
- read [Private Internet (2024)](https://kevincox.ca/2024/08/16/private-internet/)
- read [A tool to verify estimates, II: a flexible proof assistant](https://terrytao.wordpress.com/2025/05/09/a-tool-to-verify-estimates-ii-a-flexible-proof-assistant/)
}

\mdblock{2025-05-09}{
- read [Memory Safety Features in Zig](https://gencmurat.com/en/posts/memory-safety-features-in-zig/)
    - very well summarized, with great examples
- read [Reservoir Sampling](https://samwho.dev/reservoir-sampling/)
- read [You can use C-Reduce for any language](https://bernsteinbear.com/blog/creduce/)
- read [Rust Dependencies scare Me](https://lobste.rs/s/j3nhhc)
    - a comment reminds me of [Build It Yourself](https://lucumr.pocoo.org/2025/1/24/build-it-yourself/)
- read [What's in an e-graph?](https://bernsteinbear.com/blog/whats-in-an-egraph/)
- read [A catalog of ways to generate SSA](https://bernsteinbear.com/blog/ssa/)
}

\mdblock{2025-05-08}{
- read \citef{zhang2024transformers}
    - insightful, and well summarized related work
- trying to figure out a way to let AI agent to read all papers citing an paper, and write a summary of the follow-up research
- read [The magic of software; or, what makes a good engineer also makes a good engineering organization](https://moxie.org/2024/09/23/a-good-engineer.html)
    -  "Engineers are most capable and most effective when abstraction layers serve as shorthand for an understanding of what it is doing on your behalf, rather than a black box"
    - "start with deep understanding as the basis for innovation â cultivating the curiosity to look inside the black boxes"
    -  "The magic of both software and software organizations comes from those moments where insight into how something works sparks entirely new ideas about what it could become"
- read [Implement your language twice](https://futhark-lang.org/blog/2025-05-07-implement-your-language-twice.html)
    - [Futhark](https://futhark-lang.org/) is a statically typed, data-parallel, and purely functional array language with AoT compilation to CUDA, OpenCL, HIP, and WebGPU (WIP)
    - read also [Comparing the performance of OpenCL, CUDA, and HIP](https://futhark-lang.org/blog/2024-07-17-opencl-cuda-hip.html)
- read [Objective-C interop with Zig?](https://www.reddit.com/r/Zig/comments/1khb8yo/objectivec_interop_with_zig/)
- got zig to work inside lima with minimal setup
}

\mdblock{2025-05-07}{
- read [Zigâs Low-Level Safety Features Leave Rust in the Dust](https://www.reddit.com/r/Zig/comments/1kgk07m/zigs_lowlevel_safety_features_leave_rust_in_the/)
- read [Zig defer Patterns](https://matklad.github.io/2024/03/21/defer-patterns.html)
- read [Glossary Web Component](https://dbushell.com/2025/05/07/glossary-web-component/)
- read [Recreating an iOS Animation with GLSL (interactive tutorial)](https://nmattia.com/posts/2025-05-07-airpods-hearing-test-animation/)
- found [Argo CD - Declarative Continuous Delivery for k8s](https://github.com/argoproj/argo-cd)
- found [bash/POSIX-compatible shell implemented in Rust](https://github.com/reubeno/brush)
- found [nnd: A TUI alternative to gdb](https://github.com/al13n321/nnd)
}

\mdblock{2025-05-07}{
- read [Zigâs Low-Level Safety Features Leave Rust in the Dust](https://www.reddit.com/r/Zig/comments/1kgk07m/zigs_lowlevel_safety_features_leave_rust_in_the/)
- found [Parallel, Concurrent and Distributed Programming](https://ilyasergey.net/YSC4231/) in Scala
- found [nnd: A TUI alternative to gdb](https://github.com/al13n321/nnd)
- found [A part of the fundamental group of an n-dimensional beanA](https://tikz.org/bean/)
- read [Building a regex engine](https://sh4dy.com/2025/05/01/regex_engine/) in C++
- wondering about chaos engineering in Zig with eBPF
    - learn more about [zbpf](https://github.com/tw4452852/zbpf)
    - maybe it's easiest to use [lima](https://lima-vm.io/) to test eBPF
    - found [Pixie](https://px.dev/) when reading [Debugging Production: eBPF Chaos](https://www.infoq.com/articles/debugging-production-ebpf-chaos/)
    - read [Introducing Minderbinder](https://blog.scottgerring.com/posts/introducing-minderbinder/) which is in Go
- found [alternative open source front-ends for popular internet platforms](https://github.com/mendel5/alternative-front-ends)
}

\subtree[2025-05-06]{
\title{2025-05-06}
\md{
- LM
    - survey papers
        - [A Survey on Inference Engines for Large Language Models: Perspectives on Optimization and Efficiency](https://huggingface.co/papers/2505.01658)
        - [Low-Precision Training of Large Language Models: Methods, Challenges, and Opportunities](https://huggingface.co/papers/2505.01043)
            - sadly, NormalFloat used by QLoRA is excluded from the paper, as it is "specifically designed for pretrained fixed parameters, which only participate in the forward inference stage during training."
    - improvements on reasoning
        - [Think on your Feet: Adaptive Thinking via Reinforcement Learning for Social Agents](https://huggingface.co/papers/2505.02156)
            - the model is trained to switch between different complexity level of thinking mode based on context for an optimal balance between correct answer and reasoning length
            - the thinking modes are inspired by Hierarchical Cognitive Control Theory (HCCT)
        - [RM-R1: Reward Modeling as Reasoning](https://huggingface.co/papers/2505.02387)
            - provides good insight into reward modeling and how each training stage boosts the model's performance
    - other
        - [Unlearning Sensitive Information in Multimodal LLMs: Benchmark and Attack-Defense Evaluation](https://huggingface.co/papers/2505.01456)
            - I'm still interested in unlearning and model editing
- read [Benchmarking Crimes Meet Formal Verification](https://microkerneldude.org/2025/04/27/benchmarking-crimes-meet-formal-verification/)
    - learn about [Systems Benchmarking Crimes](https://gernot-heiser.org/benchmarking-crimes.html)
- Zig related:
    - read [Implementing a Struct of Arrays](https://brevzin.github.io/c++/2025/05/02/soa/)
        - Zig has easy-to-use support of SoA via [MultiArrayList](https://zig.news/kristoff/struct-of-arrays-soa-in-zig-easy-in-userland-40m0)
        - learn about [Data-Oriented Design](https://dataorienteddesign.com/dodbook/)
        - I can't help but feel that new features of C++ such as reflection is really becoming syntax cancer
    - read [Reflecting on a year of Gamedev in Zig](https://bgthompson.codeberg.page/blog/one-year-zig-gamedev-reflections/)
    - read [Jai, the game programming contender](https://bitshifters.cc/2025/04/28/jai.html)
- bringing data to AI, not the other way around
    - read [The Data Surrender Trap: How Enterprises Are Losing Control in the AI Gold Rushâand the Simple Fix](https://www.softinio.com/post/the-data-surrender-trap/)
- lifestyle
    - read [Protect The Habit](https://justinmath.com/protect-the-habit/)
    - skimmed [blogging in isolation](https://blog.avas.space/blogging-in-isolation/)
- skimmed [modern-latex: A short guide to LaTeX that avoids legacy cruft](https://github.com/mrkline/modern-latex)
- read [The Beauty Of Having A Pi-hole](https://den.dev/blog/pihole/)
    - own your own DNS
- read [An appeal to Apple from Anukari regarding GPU frequency scaling](https://anukari.com/blog/devlog/an-appeal-to-apple)
    - I'm amazed that the author is using GPU to simulate physics for realtime audio
}
}

\mdblock{2025-05-04}{
- found [pyonji](https://git.sr.ht/~emersion/pyonji), a tool to support sr.ht style e-mail patches
- read [Git: programmatic staging](https://choly.ca/post/git-programmatic-staging/)
    - and learn about `grepdiff`, unfortunately, it's not available on Mac
    - `git add -p` is also acceptable for a small number of hunks
- read [MathML with Pandoc](https://leancrew.com/all-this/2025/05/mathml-with-pandoc/)
- read [Starting on seamless C++ interop in jank](https://jank-lang.org/blog/2025-05-02-starting-seamless-interop/)
- found [Anemll: Artificial Neural Engine Machine Learning Library](https://github.com/Anemll/Anemll)
}

\subtree[2025-05-02]{
\title{2025-05-02}
\md{
- read \citef{ren2025deepseekproverv2}
    - \citef{tie2025survey}
        - notes on LM could be based on this survey and the following papers related to r1
    - \citef{zhang2025days}
        - \citef{guo2025deepseek}
            - should revisit
    - found critics of r1/GRPO
        - \citef{liu2025understanding}
        - \citef{yue2025does}
    - read \citef{wang2025kimina}
- found [A Survey of Interactive Generative Video](https://huggingface.co/papers/2504.21853)
- read [Polishing your typography with line height units](https://webkit.org/blog/16831/line-height-units/)
- read [Solving Sudoku with Algebraic Geometry and Computer Algebra : A C Programming Approach](https://x.com/7etsuo/status/1813482989139161344)
}
}

}

\subtree[2025-04]{
\title{April, 2025}

\mdblock{2025-04-30}{
- found \citef{zhang2025leanabell}
- skimmed \citef{lipman2024flow}
- read [APL: Comparison with Traditional Mathematics](https://aplwiki.com/wiki/Comparison_with_traditional_mathematics)
- read [I use Zip Bombs to Protect my Server](https://idiallo.com/blog/zipbomb-protection)
- found [Prolog Notes](https://github.com/dtonhofer/prolog_notes)
- found [Quotes on notation design & how it affects thought](https://github.com/kai-qu/notation)
}

\mdblock{2025-04-29}{
- found [A Dependently Typed Assembly Language](https://www.cs.cmu.edu/~rwh/papers/dtal/OGI-CSE-99-008.pdf)
- read [Qwen3: Think Deeper, Act Faster](https://qwenlm.github.io/blog/qwen3/)
- found [Topologies and Sheaves Appeared as Syntax and Semantics of Natural Language (2012)](http://www.pdmi.ras.ru/~prosorov/papers/Prosorov_PhML2012.pdf)
    - reveals connection between sheaf theory and linguistics
- found \citef{brody2023expressivity} [[code](https://github.com/tech-srl/layer_norm_expressivity_role)]
- found \citef{wang2023grammar}
- wrote [[uts-016B]]
}

\mdblock{2025-04-28}{
- read [BitNet v2: Native 4-bit Activations with Hadamard Transformation for 1-bit LLMs](https://huggingface.co/papers/2504.18415)
- read [Converting a C API to Zig with the help of comptime](https://www.reddit.com/r/Zig/comments/1k9vuni/converting_a_c_api_to_zig_with_the_help_of/)
- read [How a Single Line Of Code Could Brick Your iPhone](https://rambo.codes/posts/2025-04-24-how-a-single-line-of-code-could-brick-your-iphone)
- found [Nouveau: The Rule Based Language Family](https://nouveau.community/)
    - and easily got into an infinite loop by adding a rule trying to combine a match and a box back to a matchbox
- read [Technical Debt as Theory Building and Practice](https://www.usenix.org/conference/srecon25americas/presentation/lam)
- read [Using HAProxy to protect me from scrapers](https://dgl.cx/2025/04/using-haproxy-to-stop-scrapers)
- read [What if we embraced simulation-driven development?](https://pierrezemb.fr/posts/simulation-driven-development/)
    - [Notes about ETCD](https://pierrezemb.fr/posts/notes-about-etcd/), there are some war stories
    - [Notes about Raft's paper](https://pierrezemb.fr/posts/notes-about-raft/)
- read [toycalculator, an MLIR/LLVM compiler experiment.](https://peeterjoot.com/2025/04/27/toycalculator-an-mlir-llvm-compiler-experiment/)
}

\mdblock{2025-04-27}{
- found [APL Cultivations](https://xpqz.github.io/cultivations/Intro.html)
- read [Understanding SVG Paths](https://www.nan.fyi/svg-paths)
- read [Remove these tags from <head>](https://getoutofmyhead.dev/)
- found [Dive into Systems (2020)](https://diveintosystems.org/)
- found [Smallweb â Your Internet Folder](https://smallweb.run/)
- found [Cognition's DeepWiki, a free encyclopedia of all GitHub repos](https://news.smol.ai/issues/25-04-25-cognition-deepwiki/)
}

\mdblock{2025-04-26}{
- found [Mitata - a beautiful benchmarking tool](https://hwisnu.bearblog.dev/mitata-benchmarking-tool/)
- read [Nofl: A Precise Immix](https://arxiv.org/pdf/2503.16971v1)
- read [O(no) You Didnât](https://mrshiny608.github.io/MrShiny608/optimisation/2025/04/22/OhNoYouDidnt.html)
- found [PyGraph: Robust Compiler Support for CUDA Graphs in PyTorch](https://arxiv.org/abs/2503.19779)
}

\mdblock{2025-04-25}{
- read [Bevy 0.16](https://bevyengine.org/news/bevy-0-16/)
    - learn about GPU-Driven Rendering and [WESL](https://wesl-lang.dev/)
- read [How I Got Hacked: A Warning about Malicious PoCs](https://chocapikk.com/posts/2025/s1nk/)
- read [MCP Security: Tool Poisoning Attacks](https://invariantlabs.ai/blog/mcp-security-notification-tool-poisoning-attacks)
- read [The âtrickonometryâ of math olympiad inequalities](https://www.andreinc.net/2025/03/17/the-trickonometry-of-math-olympiad-inequalities)
    - intriguing write-up, well collected problems, insightful perspective
    - found [My list of challenging software projects some programmers should try](https://www.andreinc.net/2024/03/28/programming-projects-ideas)
- read [Towards Vortex 1.0](https://spiraldb.com/post/towards-vortex-10)
    - a next-generation columnar format with self-describing layouts and WASM decoders that is 200x faster than Parquet for random access, among other goodies
}

\mdblock{2025-04-24}{
- read [Abusing DuckDB-WASM by making SQL draw 3D graphics (Sort Of)](https://www.hey.earth/posts/duckdb-doom)
    - a very cool idea
    - I should learn more about modern databases
- found [Bluefish](https://bluefishjs.org/)
    - a JS diagram library with quite some potential
    - some teaser examples were added by [this commit](https://github.com/bluefishjs/bluefish/commit/c2fb70cc6e8c8c4f4d2f4a797fc2875ba66d00ba)
- read \citef{popescu2025exploiting}
    - so there are actually many performance-wise well defined UBs in LLVM
- read [GPU Compilation with MLIR](https://vectorfold.studio/blog/gpu-compilation)
    - found [MLIR Python Bindings](https://mlir.llvm.org/docs/Bindings/Python/)
- skimmed [Some possible roles for AI of Grothendieck topos theory](https://www.laurentlafforgue.org/Expose_Lafforgue_topos_AI_ETH_sept_2022.pdf) by Laurent Lafforgue (2022)
- made a start on improving PDF organization in and out of MarginNote
- looked for ways to manipulate iCloud files programatically
    - noticed that [`rclone` supports iCloud too](https://rclone.org/iclouddrive/)
    - but `~/Library/Mobile Documents/com~apple~CloudDocs` already works well for my purpose
}

\mdblock{2025-04-23}{
- read [Nine Reasons to Use OSH](https://oils.pub/osh.html)
    - it contains a POSIX-compatible shell `osh`, and an incompatible shell `ysh`
    - it's written in a subset of Python, then transpiled to C++ by [mycpp](https://github.com/oils-for-unix/oils/blob/master/mycpp/README.md) that is based on MyPy, an interesting approach
- found [codapi](https://codapi.org/) which supports sandboxes for Rust, Zig, Elixir etc.
}

\mdblock{2025-04-22}{
- read [Make Your Own Internet Presence with NetBSD and a 1 euro VPS â Part 1: Your Blog](https://it-notes.dragas.net/2025/04/22/make-your-own-internet-presence-with-netbsd-and-a-1-euro-vps-part-1-your-blog/)
    - which uses [BSSG](https://bssg.dragas.net/), a simple static site generator written in Bash
    - will settle on UTM for Mac/BSD virtualization, and Lima for Linux virtualization
    - still haven't figure out how to virtualize/emulate NetBSD with UTM, see [this issue](https://github.com/utmapp/UTM/discussions/7069)
- read [My Dev Workflow: 2025](https://minami.bearblog.dev/my-dev-workflow-2025/)
    - found and started using [Loop](https://github.com/MrKai77/Loop)
}

\subtree[2025-04-21]{
\title{2025-04-21}
\md{
- wish to learn more about other architectures of LMs, e.g.
    - \citef{ma2025bitnet}
    - \citef{zhao2025d1}
    - \citef{wang2025m1}
    - [RWKV7-G1](https://huggingface.co/BlinkDL/rwkv7-g1) "GooseOne" reasoning model, see \citef{peng2025rwkv}
    - ModernBERT, see \citef{warner2024smarter}
- read [The State of Reinforcement Learning for LLM Reasoning: Understanding GRPO and New Insights from Reasoning Model Papers](https://magazine.sebastianraschka.com/p/the-state-of-llm-reasoning-model-training)
- read [Lorenz and modular flows: a visual introduction](https://www.josleys.com/articles/ams_article/Lorenz3.htm) which is "deep, beautiful and with a taste of singularity and knot theory"
    - found [Ultra Fractal 6](https://www.ultrafractal.com/) and [POV-Ray](https://www.povray.org/)
- found [less_slow.cpp: Playing Around Less Slow Coding Practices for C++, CUDA, and Assembly Code](https://github.com/ashvardanian/less_slow.cpp)
- found [Common Expression Language](https://github.com/google/cel-spec)
- read [How I use Kate Editor](https://akselmo.dev/posts/how-i-use-kate-editor/)
- watched [Implicit Surfaces (using interval arithmetic to evaluate SDFs)](https://www.youtube.com/watch?v=UxGxsGnbyJ4)
    - [PDF Slides](https://www.mattkeeter.com/research/hmc_colloquium.pdf)
    - the ideas behind [Fidget](https://github.com/mkeeter/fidget) and \citef{keeter2020massively} well explained, GOAT-level inspiring
    - should be further explored in [[ag-000G]]
    - there are also many interesting writeups in [The Prospero Challenge](https://www.mattkeeter.com/projects/prospero/)
- read [Things Zig comptime Won't Do](https://matklad.github.io/2025/04/19/things-zig-comptime-wont-do.html)
- [Lustre](https://hexdocs.pm/lustre/index.html) reminds me of [Gleam](https://gleam.run/) that has a Rust-like syntax, runs on Erlang VM, and supports compiling to JavaScript
- note more about Taiji and practice more
}
}

\mdblock{2025-04-19}{
- read [Common shell script mistakes](https://www.pixelbeat.org/programming/shell_script_mistakes.html)
- read [Four Years of Jai](https://smarimccarthy.is/posts/2024-12-02-four-years-of-jai/)
- read [My journey from Ruby to Elixir: lessons learned](https://www.erlang-solutions.com/blog/my-journey-from-ruby-to-elixir-lessons-from-a-developer/)
- read [Revisiting an early critique of formal verification](https://lawrencecpaulson.github.io/2025/03/14/revisiting_demillo.html)
}

\mdblock{2025-04-18}{
- found [Matrix Calculus for Machine Learning and Beyond](https://github.com/mitmath/matrixcalc)
- read [Reflections on Unikernels](https://dave.recoil.org/unikernels/)
    - found [OSv](https://osv.io/)
    - revisit [Seastar](https://seastar.io/), a C++ server framework that uses a shared-nothing model
- read [Stop Writing `__init__` Methods](https://blog.glyph.im/2025/04/stop-writing-init-methods.html)
    - for potential gotchas, read also [Python dataclasses, a package full of surprises](https://fohlen.github.io/posts/python-dataclasses-a-package-full-of-surprises/index.html)
- read [Weird / irritating build issue with raylib](https://www.reddit.com/r/Zig/comments/1k1nrf0/weird_irritating_build_issue_with_raylib/)
    - so I should also start using the new hash format
- read [Zig and GPUs](https://alichraghi.github.io/blog/zig-gpu/)
}

\mdblock{2025-04-17}{
- found [A practical hacker's guide to the C programming language](https://github.com/codr7/hacktical-c)
- read [An Intro to DeepSeek's Distributed File System](https://maknee.github.io/blog/2025/3FS-Performance-Journal-1/)
    - my takeaway: DeepSeek's 3FS sacrifices small-file performance, POSIX compatibility, and fault tolerance (single-master risk) to maximize large-file throughput via CRAQ-based chain replication and RDMA-optimized chunk writes on 512B-sector SSDs
- read [Development On Apple Silicon with UTM](https://rkiselenko.dev/blog/development-on-mac-with-utm/development-on-mac-with-lima/)
    - found [cloud-init](https://cloudinit.readthedocs.io/)
- read [TLS Certificate Lifetimes Will Officially Reduce to 47 Days](https://www.digicert.com/blog/tls-certificate-lifetimes-will-officially-reduce-to-47-days)
- found [Torque â A lightweight meta-assembler for any processor](https://benbridle.com/projects/torque.html)
- found [Unsure Calculator](https://filiph.github.io/unsure/)
- read [Zigistry about to reach 300 stars on GitHub â­ï¸](https://www.reddit.com/r/Zig/comments/1k0sg2s/zigistry_about_to_reach_300_stars_on_github/)
- read [[AINews] OpenAI o3, o4-mini, and Codex CLI](https://buttondown.com/ainews/archive/ainews-openai-o3-o4-mini-and-codex-cli/)
    - and particularly [codex: Lightweight coding agent that runs in your terminal](https://github.com/openai/codex)
- read [the lifecycle of a pull request](https://blog.tangled.sh/pulls) and tried to login to https://tangled.sh/
- learned about [`std::autodiff`](https://rustc-dev-guide.rust-lang.org/autodiff/internals.html) in Rust via `Enzyme`
- converted some of my playlist to Youtube Music and scrobble them to libre.fm
    - found also [cmus](https://cmus.github.io/), a TUI music player that plays from local files, and supports scrobbling
- wrote some more Taiji notes
}

\mdblock{2025-04-16}{
- read [A flowing WebGL gradient, deconstructed](https://alexharri.com/blog/webgl-gradients)
- found [An Introduction to Modern CMake](https://cliutils.gitlab.io/modern-cmake/README.html)
- read [JSX Over The Wire](https://overreacted.io/jsx-over-the-wire/)
- found [ax](https://github.com/ax-llm/ax), DSPy in TypeScript
- looked for HEIC libraries in C that can be used in Zig
- found [WebTUI](https://webtui.ironclad.sh/)
- found [Terminal Trove](https://terminaltrove.com/), a collection of terminal-based applications
}

\mdblock{2025-04-15}{
- read [A 2025 Survey of Rust GUI Libraries](https://www.boringcactus.com/2025/04/13/2025-survey-of-rust-gui-libraries.html)
- read [Algebraic Semantics for Machine Knitting](https://uwplse.org/2025/03/31/Algebraic-Knitting.html)
    - further reading:
        % - \citef{hofmann2024koda}
        - \citef{lin2023semantics}
- read [C++20 idioms for parameter packs](https://www.scs.stanford.edu/~dm/blog/param-pack.html)
- skimmed \citef{hull2023flat}
- read [Pretty State Machine Patterns in Rust](https://hoverbear.org/blog/rust-state-machine-pattern/)
- read [Implementing GRPO](https://www.k-a.in/grpo-1B.html)
- found [Networking Research Resources](https://enhancedformysql.github.io/tech-explorer-hub/reading/networking/index.html)
- found [TeX.social](https://tex.social/): a feed aggregator for LaTeX-related sites, especially blogs.
- read [A 2025 Survey of Rust GUI Libraries](https://www.boringcactus.com/2025/04/13/2025-survey-of-rust-gui-libraries.html)
- learn about [AerynOS](https://aerynos.com/)
- read [Algebraic Semantics for Machine Knitting](https://uwplse.org/2025/03/31/Algebraic-Knitting.html)
- read [C++20 idioms for parameter packs](https://www.scs.stanford.edu/~dm/blog/param-pack.html)
- read [Flat origami is Turing complete](https://arxiv.org/abs/2309.07932)
- read [Frontier AI Models Still Fail at Basic Physical Tasks: A Manufacturing Case Study](https://adamkarvonen.github.io/machine_learning/2025/04/13/llm-manufacturing-eval.html)
- read [Procedural Foliage Rendering with L-systems and Geometry Instancing](https://jysandy.github.io/posts/procedural-trees/)
- read [What the Hell Is a Target Triple?](https://mcyoung.xyz/2025/04/14/target-triples/)
- try converting some playlist to Spotify with [TuneMyMusic](https://www.tunemymusic.com/)
    - screenshot, VLM OCR, then text to playlist
    - Spotify doesn't always have the songs, even if manual search, e.g. some songs before 2017
- thinking about Graph RAG, and found [HelixDB](https://github.com/HelixDB/helix-db), a graph-vector database
}

\mdblock{2025-04-14}{
- read [A Visual Journey Through Async Rust](https://github.com/alexpusch/rust-magic-patterns/blob/master/visual-journey-through-async-rust/Readme.md)
    - and it would be insteresting to see the visualization for `monoio`
- read [Solving One Million Sudoku Puzzles per hour](https://www.miakoring.de/blog/sudoku) in Swift
}

\mdblock{2025-04-13}{
- looking for Zig libraries for TUI, `io_uring`, eBPF, scripting, e-graph
    - the candidates are `libvaxis`, `libxev`, `zbpf`, `Cyber`, `zegg`, respectively
- found [Juniper CAS](https://github.com/MixedMatched/juniper), which is exactly my original dream for lean-ga
- found [Beaver](https://github.com/beaver-lodge/beaver): MLIR Toolkit in Elixir and Zig.
    - one relevant application is [Manx](MLIR compiler/backend for the Nx)
- read [Building a high-performance database buffer pool in Zig using io_uring's new fixed-buffer mode](https://gavinray97.github.io/blog/io-uring-fixed-bufferpool-zig)
- read [How io_uring and eBPF Will Revolutionize Programming in Linux](https://www.scylladb.com/2020/05/05/how-io_uring-and-ebpf-will-revolutionize-programming-in-linux/)
- found [Performance Analysis and Tuning on Modern CPUs](https://github.com/dendibakh/perf-book)
}

\mdblock{2025-04-12}{
- read [Bootstrapping Understanding: An Introduction to Reverse Engineering](https://www.muppetlabs.com/~breadbox/txt/bure.html)
- read [Bug in Outlook PST Password Protection (2006)](https://www.nirsoft.net/articles/pst_password_bug.html)
- read [Erlangâs not about lightweight processes and message passingâ¦](https://stevana.github.io/erlangs_not_about_lightweight_processes_and_message_passing.html)
    - further reading: \citef{armstrong2003making}
- found [Rust to C compiler - 95.9\% test pass rate, odd platforms](https://fractalfir.github.io/generated_html/cg_clr_odd_platforms.html)
- read [Shadertoys ported to Rust GPU](https://rust-gpu.github.io/blog/2025/04/10/shadertoys)
- read [Build a Static Site in Elixir Under 5 Minutes with Phoenix Components](https://mishka.tools/blog/build-a-static-site-in-elixir-under-5-minutes-with-phoenix-components) while looking for SSG in Elixir
}

\mdblock{2025-04-11}{
- read [12-factor-agents: Principles to build LLM-powered software good enough to put in the hands of production customers](https://github.com/humanlayer/12-factor-agents)
- found [cargo-mutants: Inject bugs and see if your tests catch them](https://github.com/sourcefrog/cargo-mutants)
- found [DeepCoder: A Fully Open-Source 14B Coder at O3-mini Level](https://pretty-radio-b75.notion.site/DeepCoder-A-Fully-Open-Source-14B-Coder-at-O3-mini-Level-1cf81902c14680b3bee5eb349a512a51)
}

\mdblock{2025-04-09}{
- read [Archiving URLs](https://gwern.net/archiving)
    - maybe I should use tools like [ArchiveBox](https://github.com/ArchiveBox/ArchiveBox#input-formats) to prevent link rot
- read [Mistakes and cool things to do with arena allocators](https://zylinski.se/posts/dynamic-arrays-and-arenas/)
- found [shorty: a C++ library for concise lambdas](https://github.com/hanickadot/shorty)
- read [Parser Combinators Beat Regexes](https://entropicthoughts.com/parser-combinators-beat-regexes)
- found [facet: Rust reflection, serialization, deserialization â know the shape of your types](https://github.com/facet-rs/facet)
    - thus found [unsynn: a minimalist rust parser library](https://github.com/ShabbirHasan1/unsynn)
- read [$handle_undefined_function in Elixir/Erlang](https://yiming.dev/blog/2018/11/27/$handle-undefined-function-in-elixir-erlang/)
- found [Twee, an equational theorem prover](https://nick8325.github.io/twee/) again
    - from [Automated Equational Reasoning with Twee Pt 1.](https://www.philipzucker.com/twee/)

}

\mdblock{2025-04-08}{
- read [Beautiful CI for Bazel](https://narang99.github.io/2025-03-22-monorepo-bazel-jenkins/)
- found [Real-Time Rendering Resources](https://www.realtimerendering.com/)
- read [The Gamma Knife model of incidents (2019)](https://surfingcomplexity.blog/2019/08/25/the-gamma-knife-model-of-incidents/)
- read [Thinking like a compiler: places and values in Rust](https://steveklabnik.com/writing/thinking-like-a-compiler-places-and-values-in-rust/)
- read [Writing good comments: the why, not the how (2020)](https://www.jackfranklin.co.uk/blog/code-comments-why-not-how/)
- read [My neovim markdown setup in 2025](https://linkarzu.com/posts/neovim/markdown-setup-2025/)
}

\mdblock{2025-04-07}{
- read [Model error](https://surfingcomplexity.blog/2025/04/06/model-error/)
- wrote [[uts-016A]]
}

\mdblock{2025-04-05}{
- read [Atproto Ethos](https://atproto.com/articles/atproto-ethos)
- read [BPF From Scratch In Rust](https://yeet.cx/blog/bpf-from-scratch-in-rust/)
- read [Pitfalls of Safe Rust](https://corrode.dev/blog/pitfalls-of-safe-rust/)
}

\mdblock{2025-04-04}{
- read [Of manners and machines](https://commaok.xyz/post/manners/)
- read [Rewriting my site in vanilla web](https://leanrada.com/notes/vanilla-web-rewrite/)
    - [TAC: A new CSS methodology](https://jordanbrennan.hashnode.dev/tac-a-new-css-methodology)
    - [Blinded By the Light DOM](https://meyerweb.com/eric/thoughts/2023/11/01/blinded-by-the-light-dom/)
    - maybe I should rewrite most of my customizations to forest markup as web components
- read [Vector Sets are part of Redis](http://antirez.com/news/149)
- read [Towards fearless SIMD, 7 years later](https://linebender.org/blog/towards-fearless-simd/)
- read [Introduction to Monoio: A High-Performance Rust Runtime](https://chesedo.me/blog/monoio-introduction/)
- found [Public mdBooks](https://mdbooks.code-maven.com/)
}

\mdblock{2025-04-03}{
- learn about [geonum](https://github.com/mxfactorial/geonum), a ridiculously fast Rust library that supports many GA operations except for geometric product
- read some portions of [On the Biology of a Large Language Model](https://transformer-circuits.pub/2025/attribution-graphs/biology.html)
    - it's a particularly inspiring article on the interpretability of LLMs
    - it's authored with [Distill Template](https://github.com/distillpub/template), see [guide](https://distill.pub/guide/)
    - similarly, found [World Models](https://worldmodels.github.io/)
- read [A Year of Rust in ClickHouse](https://clickhouse.com/blog/rust)
- read [AI ambivalence](https://nolanlawson.com/2025/04/02/ai-ambivalence/)
- read [Minimal CSS-only blurry image placeholders](https://leanrada.com/notes/css-only-lqip/)
- found [chawan: TUI Web Browser](https://sr.ht/\%7Ebptato/chawan/)
}

\mdblock{2025-04-02}{
- read [Stop syncing everything](https://sqlsync.dev/posts/stop-syncing-everything/), which launches [Graft](https://github.com/orbitinghail/graft), an open-source transactional storage engine optimized for lazy, partial, and strongly consistent replicationâperfect for edge, offline-first, and distributed applications.
- read [The Most Amusing Security Flaws I've Discovered](https://predr.ag/blog/xorry-not-sorry-most-amusing-security-flaws-ive-discovered/)
- read [Foundation Models and Unix](https://vagos.github.io/blog/foundation-models-unix.html)
- read [Goodbye Offpunk, Welcome XKCDpunk](https://ploum.net/2025-04-01-xkcdpunk.html)
- read [Hello Quarto: Porting my Website from Hugo ApÃ©ro](https://silviacanelon.com/blog/2023-09-29-hello-quarto/)
- found [Interaction nets](https://wiki.xxiivv.com/site/interaction_nets.html)
- read [Programming with an AI copilot: My perspective as a senior dev](https://mlagerberg.com/blog-ai-copilot/)
- found [Testing Distributed Systems](https://asatarin.github.io/testing-distributed-systems/)
- found
    - \citef{petersen2024mathematical}
    - \citef{dong2025beyond}
    - \citef{yu2025dapo}
}

}

\subtree[2025-03]{
\title{March, 2025}

\mdblock{2025-03-31}{
- read [There is no Vibe Engineering](https://serce.me/posts/2025-31-03-there-is-no-vibe-engineering)
- found [Koto Programming Language](https://koto.dev/), it's not so DSL-friendly like Rhai, but a reasonably good script language embeddable in Rust
- read [Thoughts on ECS](https://blog.voxagon.se/2025/03/28/thoughts-on-ecs.html)
- read [Expressing Japanese Grammar Through TypeScript Type System](https://github.com/typedgrammar/typed-japanese/blob/main/blog.md)
    - I really wanted this for French, except for not in TypeScript, but something Rust-like
}

\mdblock{2025-03-30}{
- work on exporting Discord chat and feeding them to [RAG](https://github.com/stars/utensil/lists/llm-kb), the result is not quite ideal
- try DeepSeek-v3-0324, but still not as good as Claude 3.5 for my use cases
- re-evaluate [marimo](https://marimo.io/) as an alternative to testing with Jupyter notebooks
    - but it doesn' store outputs, and [the candidate testing solution](https://github.com/marimo-team/marimo/discussions/573) is not elegant
}

\mdblock{2025-03-28}{
- found
    - \citef{bach2024learning}
    - \citef{feng2023winding}, and read [the blog post](https://nzfeng.github.io/research/WNoDS/index.html)
    - \citef{williams2025simulating}
- read [Succinct data structures](https://blog.startifact.com/posts/succinct/)
- found [Xee: A Modern XPath and XSLT Engine in Rust](https://blog.startifact.com/posts/xee/) which could be used to process Forester XMLs in the future
- found [The Mean-ing of Loss Functions](https://jiha-kim.github.io/posts/the-mean-ing-of-loss-functions/)
- wrote [[uts-0167]]
}

\mdblock{2025-03-27}{
- learn more about Elixir
    - read [Running ML models in Elixir using Pythonx](https://samrat.me/running-ml-models-in-elixir-using-pythonx/)
    - read [Embedded Zig with Elixir, Mandelbrot set](https://zig.news/ndrean/embedded-zig-with-elixir-mandelbrot-set-4e31)
    - read [Rustler Precompilation guide](https://hexdocs.pm/rustler_precompiled/precompilation_guide.html)
    - learn about [axon](https://github.com/elixir-nx/axon) and the [Numerical Elixir (Nx)](https://github.com/elixir-nx) ecosystem
- read [Why MCP Won](https://www.latent.space/p/why-mcp-won)
}

\mdblock{2025-03-24}{
- slowly picking up open-source work, after fragmented learning due to the DeepSeek hype
- found [PeanoScript](https://peanoscript.mjgrzymek.com/tutorial), TypeScript but a theorem prover
- read [attention is logarithmic, actually](https://supaiku.com/attention-is-logarithmic)
- read \citef{roelfs2025willing}, the [Kingdon](https://github.com/tBuLi/kingdon) paper
}

\mdblock{2025-03-18}{
- found [Rhombus](https://rhombus-lang.org/), a Racket without parenthesis
- read [Writing a SIGGRAPH paper (for fun) (2020)](https://www.mattkeeter.com/projects/siggraph/)
- read [The 70\% problem: Hard truths about AI-assisted coding](https://addyo.substack.com/p/the-70-problem-hard-truths-about)
- learn about [owi: Cross-language Bugfinder](https://github.com/OCamlPro/owi)
- found \citef{murphy2024reinforcement}, some ML books by the same author are [on Github](https://github.com/AniruddhaChattopadhyay/Books)
- found \citef{prasolov1995intuitive}
}

\mdblock{2025-03-13}{
- learn about \citef{helmstetter2013minimal}, a paper about determining whether a multivector is a versor, as versors are invertible lipschitzian elements, related to [galgebra#533](https://github.com/pygae/galgebra/issues/533)
}

\mdblock{2025-03-11}{
- found
    - Math
        - [Category Theory Illustrated](https://github.com/abuseofnotation/category-theory-illustrated)
        - \citef{haydys2024introduction}
        - \citef{schmid2025gentle}
        - \citef{hayman2024lean}
        - \citef{fushida2020knot}
        - \citef{etingof2024introduction}
        - \citef{flori2013first}
        - [PLP - An Introduction to Mathematical Proof](https://personal.math.ubc.ca/~PLP/assets/plp.pdf) [[source](https://github.com/seckindemirbas/PLP)]
    - ML
        - [Demystifying Diffusion Models](https://goyalpramod.github.io/blogs/demysitifying_diffusion_models/#maths-of-reverse-diffusion-process)
        - \citef{guo2025deepseek}
        - \citef{li2023camel} for [Owl](https://github.com/camel-ai/owl)
}

\mdblock{2025-03-07}{

- found some readings for Rust and Zig, see [native-land commits](https://github.com/utensil/native-land/commit/e1ced218d8ad3365acca745e38279306644e475f)

}

}

\subtree[2025-02]{
\title{February, 2025}

\mdblock{2025-02-27}{
- read [Raymarching The Gunk](https://jarllarsson.github.io/gen/gunkraymarcher.html)
}

\mdblock{2025-02-26}{
- read [Uncensor any LLM with abliteration](https://huggingface.co/blog/mlabonne/abliteration)
- read [All the Transformer Math You Need to Know](https://jax-ml.github.io/scaling-book/transformers/)
- read [[AINews] Claude 3.7 Sonnet](https://buttondown.com/ainews/archive/ainews-claude-37-sonnet/)
- learn about [Typst 0.13 is out now: Experimental HTML export, semantic paragraphs, and more](https://typst.app/blog/2025/typst-0.13/)
- read [Where are all the Rewrite Rules?](https://www.philipzucker.com/rewrite_rules/), using [Knuckledragger](https://github.com/philzook58/knuckledragger), a down to earth, highly automated interactive proof assistant in Python, based on Z3
- read [My LLM codegen workflow atm](https://harper.blog/2025/02/16/my-llm-codegen-workflow-atm/)
- found [The FFmpeg School of Assembly Language](https://github.com/FFmpeg/asm-lessons/blob/main/lesson_01/index.md)
- read [Serving local LLMs with MLX](https://kconner.com/2025/02/17/running-local-llms-with-mlx.html)
- read [Enough with all the Raft](https://www.hytradboi.com/2025/2016d6c4-b08d-40b3-af2f-67926ca8521f-enough-with-all-the-raft)
}

}

\subtree[2025-01]{

\title{January, 2025}

\mdblock{2025-01-23~02-25}{
- busy with Spring Festival
- read WeRead books and wrote some reviews
- casual readings are starred in NetNewsWire
- learn stuff related to DeepSeek and MLX
- set up my new Mac Mini with M4 Pro, Logi MX Keys, MX Master 3, and 4 screen working environment
- organize my Chinese ancient poetry collection (in LaTeX, wishing to port to Typst in the future)
}

\mdblock{2025-01-11~01-22}{
- read articles on lobste.rs
    - [Elementary Water Rendering](https://jysandy.github.io/posts/gradient-water-rendering/)
    - [Prototyping in Rust](https://corrode.dev/blog/prototyping/)
    - [Go is a Well-Designed Language, Actually](https://mattjhall.co.uk/posts/go-is-well-designed-actually.html) v.s. [Why Go Should Sometimes Be a No-Go](https://brainbaking.com/post/2024/12/why-go-should-sometimes-be-a-no-go/)
    - [Zig's Comptime is Bonkers Good](https://www.scottredig.com/blog/bonkers_comptime/)
    - [Not every user owns an iPhone](https://calendar.perfplanet.com/2024/not-every-user-owns-an-iphone/)
        - First Contentful Paint (FCP)
        - Time To Interactive (TTI)
        - Interaction to Next Paint
    - [The Most Elegant Configuration Language](https://chshersh.com/blog/2025-01-06-the-most-elegant-configuration-language.html)
- found \citef{flori2012topos}
    - \citef{bielas2023applications} can provide some motivation and applications
        - [gutta cavat lapidem non vi, sed saepe cadendo](https://www.latin-is-simple.com/en/vocabulary/phrase/731/)
- wish to write more serious Zig in new year, found [Mach](https://machengine.org/)
- found *Histoire de la philosophie* by Ãmile BrÃ©hier
}

\mdblock{2025-01-01~01-10}{
- ð¦ move to new office and get used to everything
- ðï¸ making plans for the new year
}

}

}

\subtree[2024]{
\title{Year 2024}

\subtree[2024-12]{
\title{December, 2024}

\mdblock{2024-12-30}{
- read [Fish 4.0: The Fish Of Theseus](https://fishshell.com/blog/rustport/), it's about Fish team porting Fish from C++ to Rust
- found [cargo-gpu](https://github.com/rust-gpu/cargo-gpu)
- read [A letter to open-source maintainers](https://xuanwo.io/2024/10-a-letter-to-open-source-maintainers/)
    - I hope to make a release for both GAlgebra and lean4_jupyter before or around the end of the year
- read [Dotfile Management using Stow](https://matty.dev/blog/2024-07-12-dot-file-management)
    - previously I was reluctant to use stow as it's written in Perl
    - maybe I'll also try `brew bundle` too
}

\mdblock{2024-12-27}{
- read [When Zig is safer and faster than Rust](https://zackoverflow.dev/writing/unsafe-rust-vs-zig)
    - and [How to Actually Write C](https://zackoverflow.dev/writing/how-to-actually-write-c)
- read [PKMs: Less Management, More Knowledge](https://shantanugoel.com/2024/12/26/pkm-less-management-more-knowledge/)
    - found [capacities](https://capacities.io/) and [hoarder](https://hoarder.app/)
- read [Gu Shi](https://clarkesworldmagazine.com/author/gu-shi/)'s *MÃ¶bius Continuum* and write a review on Weread
}

\mdblock{2024-12-24}{
- found \citef{hutter2024introduction}
}

\mdblock{2024-12-13}{
- recieved [pygae/galgebra#529](https://github.com/pygae/galgebra/issues/529) about Shirokov inverse, read \citef{shirokov2021computing}
}

\mdblock{2024-12-17~12-22}{
- ð¿ðª
- reading Wang Guowei's philosophical works
- read [Ghostty Is NativeâSo What?](https://gpanders.com/blog/ghostty-is-native-so-what/)
}

\mdblock{2024-12-15}{
- read [My Ph.D. advisor rewrote himself in bash](https://matt.might.net/articles/shell-scripts-for-passive-voice-weasel-words-duplicates/), and learn about how weasel words, passive voice, and lexical illusions can make technical writing less precise, clear, and convey a lack of proofreading
- read [Playground Wisdom: Threads Beat Async/Await](https://lucumr.pocoo.org/2024/11/18/threads-beat-async-await/), and learn that in imperative programming, structured concurrency might be better than async/await, we don't always need to introduce functional programming concepts
- read [From where I left](https://antirez.com/news/144) by antirez, the author of Redis, and learn that he likes the new license, and he does more work but better work by using AI to proofread and help testing the work instead of replace what he does better
- read [Fermatâs Last Theorem â how itâs going](https://xenaproject.wordpress.com/2024/12/11/fermats-last-theorem-how-its-going/), and enjoy the story of finding the right work for fixing a fixable proof
- read [Dude, where's my main?](https://samwho.dev/blog/dude-wheres-my-main/) and learn that executables can be position-independent just like libraries, and wonder if I can implement chaos engineering in Rust to learn more about low-level system design
- read [post-mortems](https://github.com/danluu/post-mortems) for massive IT outage in recent years, and wish to keep a track of inspiring ones of them
- learn about [git-backdate](https://github.com/rixx/git-backdate), which can help me date unpushed commits better
}

\mdblock{2024-12-12}{
- read [How wide is a proof?](https://robwilson1.wordpress.com/2024/12/07/how-wide-is-a-proof/)
- found [Notes on Geometric Algebra](https://github.com/cloudcell/GA_Notes)
- skimmed \citef{wang2024agents} and related papers
}

\mdblock{2024-12-09~12-11}{
- ð§ busy
- reading ð*Zen and the Art of Motorcycle Maintenance: An Inquiry into Values*
}

\mdblock{2024-12-01~12-08}{
- try Deepseek Deep Think, add [[uts-002I]]
- rethinking self-hosted git repos, CI, and pages, found
    - [Forgejo](https://code.readeck.org/)
    - [GitHub Pages App](https://docs.cloudron.io/apps/githubpages/) on Cloudron
- try using aider to [write Rust script](https://github.com/utensil/forest/compare/9bc1724154aa576b6bd2979e40adc94325522aaf...rust-script-aider), not so good
    - based on [an AoC Rust script example](https://github.com/ChristopherBiscardi/advent-of-code/blob/bc5ad528576194355f2fb1b6a03091d8bcd69f76/2024/rust/scripts/get-aoc-input.rs)
    - try QwQ
- try [copilot-more](https://github.com/jjleng/copilot-more), maybe settle on it
- read [Clifford algebra or Lie algebra?](https://robwilson1.wordpress.com/2024/11/30/clifford-algebra-or-lie-algebra/)
- learn a bit more about Slang, V, and Lobster
- watch [Really amazing talk by Tomasz Stachowiak: Rendering Tiny Glades With Entirely Too Much Ray Marching](https://www.youtube.com/watch?v=jusWW2pPnA0&ab_channel=GraphicsProgrammingConference)
- read [The Door ProblemA](https://lizengland.com/blog/2014/04/the-door-problem/) from [awesome-falsehood](https://github.com/kdeldycke/awesome-falsehood)
}

}

\subtree[2024-11]{
\title{November, 2024}

\mdblock{2024-11-29}{
- read [Optimizing a Rust GPU matmul kernel](https://rust-gpu.github.io/blog/optimizing-matmul/)
}

\mdblock{2024-11-28}{
- found
    - \citef{broden2024knots}
    - \citef{etingof2024mathematical}
    - [Applied Linear Algebra and Differential Equations - Lecture notes for MATH 2350](https://www.math.hkust.edu.hk/~machas/applied-linear-algebra-and-differential-equations.pdf) by Jeffrey R. Chasnov
    - [Competitive Programmer's Handbook](https://github.com/pllk/cphb)
}

\mdblock{2024-11-27}{
- read [Haskell: A Great Procedural Language](https://entropicthoughts.com/haskell-procedural-programming)
}

\mdblock{2024-11-23~11-26}{
- ð§ busy
}

\mdblock{2024-11-22}{
- found [Slang](https://github.com/shader-slang/slang)
- read [Exploring Async Runtimes by Building our Own](https://blog.maguire.tech/posts/explorations/exploring-async-runtimes/)
- found \citef{collas2018dirac}
}

\mdblock{2024-11-21}{
- found [Impala](https://anydsl.github.io/Impala.html)
    - skimmed
        - \citef{leissa2018anydsl}
        - \citef{perard2017ratrace}
    - related:
        - [shady](https://github.com/shady-gang/shady)
        - [Vulkan Clang Compiler](https://shady-gang.github.io/vcc/)
}

\mdblock{2024-11-20}{
- skimmed
    - \citef{pepe2024staresnet}
    - \citef{filimoshina2024note}
}

\mdblock{2024-11-12~11-19}{
- experiments on using [aider](https://aider.chat/) for LLM assisted project-level pair programming
    - [this PR](https://github.com/utensil/lean4_jupyter/pull/2) is a most extensive one
- finish citation trace for GAlgebra, see [this PR](https://github.com/pygae/galgebra/pull/528) for relevant readings
- found \citef{riccardo2024towards}, Cat for DL
- found [Cario](https://www.cairo-lang.org/), a provable Rust-like language
}

\mdblock{2024-11-11}{
- found [Bartosz Ciechanowski's blog](https://ciechanow.ski/)
- found \citef{michor2008topics} and \citef{milne2012algebraic}, helpful for [[ag-0001]]
- plan to read \citef{mosto2024templex}
}

\mdblock{2024-11-10}{
- contemplate the idea of better file management with Rust
- meet datachain, extism, revisit mage-ai, should evaluate kestra, contemplate the idea of ML orchestration with Rust where each node is a WASM plugin, [BAML](https://github.com/BoundaryML/baml) has some potential
- wish to get back more on Lean and Math in this month
}

\mdblock{2024-11-08~11-09}{
- ð´
- contemplate the idea of a bot to keep me going back to work on my projects, triggered by
    - an update of a related project
    - more than a month of inactivity
        - on the repo
        - or on a recent opened issue
- read [gccrs: An alternative compiler for Rust](https://blog.rust-lang.org/2024/11/07/gccrs-an-alternative-compiler-for-rust.html)
}

\mdblock{2024-11-07}{
- read [Isa Proof Shell](https://github.com/xqyww123/Isa-Proof-Shell)
}

\mdblock{2024-11-06}{
- read [Forester 5.x git log](https://git.sr.ht/~jonsterling/ocaml-forester/log/forester-5.0-dev), not bumping to 5.x yet
- evaluate [HTMX](https://htmx.org/server-examples/) a bit
- read [Why not just embed Neovim?](https://zed.dev/blog/zed-decoded-vim), will need to revisit Zed later
- read [RustGPU: Pros&Cons](https://github.com/schell/renderling/blob/main/NOTES.md#cons--limititions--gotchas), the author [becomes a maintainer of RustGPU](https://rust-gpu.github.io/blog/2024/11/06/new-maintainers/)
- found [VR Schwarzschild black hole shader (works with SPS and SPS-I)](https://gist.github.com/MichaelMoroz/b35d456056f3b958962ffb93f37ac55c)
}
}

\subtree[2024-10]{
\title{October, 2024}

\mdblock{2024-10-30~10-31}{
- finish [[uts-002H]]
}

\mdblock{2024-10-25~10-29}{
- work on native-land
    - trying to make GA and math benchmark work, also evaluating the feasibility of benchmarking C++ libraries from Rust
    - pass CI on runpod
- work on formal-land, make Verso work
- debug various TUI tools
}

\mdblock{2024-10-18~10-24}{
- work on native-land, trying to make rust-gpu fully work
- work on formal-land, trying to establish the infrastructure to explore multiple Lean 4 projects with independent toolchains and dependencies
- switching to Neovim, make it work for Rust, Lean, and forester
- write [[uts-002F]]
- skim [The Lean Language Reference](https://lean-lang.org/doc/reference/latest/)
- start reading [Modern C++ Programming Course (C++03/11/14/17/20/23/26)](https://github.com/federico-busato/Modern-CPP-Programming)
}

\mdblock{2024-10-17}{
- initial citation trace for \citef{james2015gravitational} and \citef{james2015visualizing}
- read \citef{meseguer2023custom} (Vulkan, Ray-marching, Kerr black hole) [lrogerorrit/narwhalEngine](https://github.com/lrogerorrit/narwhalEngine)
- read \citef{bruneton2020real} (CPU precal, WebGL2, Schwarzschild black hole) [ebruneton/black_hole_shader](https://github.com/ebruneton/black_hole_shader)
- skimmed \citef{fang2024identifying}
- learn about \citef{haftmann2013haskell}: the type class for Isabelle, but its expressiveness is limited, see discussions in \citef{schmoetten2024construction}
}

\mdblock{2024-10-16}{
- read \citef{siskind2019automatic} and \citef{naumann2024matrix}, seems limited, but have some good references
- skim \citef{low2023gafro} (good library and benchmark) and \citef{eid2024developing} (good refs, but in C#)
- skim \citef{sharma2024comprehensive}, an interesting area with sparse tensors as an in-memory database in mind
- skim \citef{zhao2024felix} ([uiuc-arc/felix](https://github.com/uiuc-arc/felix)), which uses egg
}

\mdblock{2024-10-15}{
- found \citef{raptis2024functoriality}
- found \citef{shaikhha2024tensor} and \citef{zhao2024felix}
- SDQLite \citef{schleich2023optimizing} (based on [SDQL](https://github.com/edin-dal/sdql)) is an intermediate language that expresses sparse tensor workloads by separating the tensoropt computations from the storage formats
- reminds me of \citef{wu2024multi}
}

\mdblock{2024-10-11~10-14}{
- work on [native-land](https://github.com/utensil/native-land) about GPU computation, see relavant README updates.
}

\mdblock{2024-10-10}{
- watch [Chris Biscardi - Bevy: A case study in ergonomic Rust](https://www.youtube.com/watch?v=CnoDOc6ML0Y)
- have a better idea about the game about fly, evade, slingshot, and shoot around black holes, 4D implicit surfaces
- explore [sketchfab](https://sketchfab.com/3d-models/black-hole-e410da98b1e5445eae2acafaaa53587d), [polyhaven](https://polyhaven.com/), and [openverse](https://openverse.org/), and have a basic idea about how to use them in the early stage of the game
- learn about [itch.io](https://itch.io/) to surveying existing games, and a [open revenue sharing](https://itch.io/updates/introducing-open-revenue-sharing) platform to release games
- found \citef{garrity2013algebraic}
}

\mdblock{2024-10-09}{
- read [C++ Package Managers: The Ultimate Roundup](https://moderncppdevops.com/pkg-mngr-roundup/), and start using [xrepo](https://xrepo.xmake.io/) for C/C++ package management, it also supports a wide range of [package repositories](https://xmake.io/#/home?id=supported-package-repositories), including Conan, Conda, Vcpkg, Homebrew, Apt, and Cargo. But not [BinaryBuilder.jl ecosystem](https://github.com/JuliaPackaging/BinaryBuilder.jl) (see also [this FAQ](https://docs.binarybuilder.org/dev/FAQ/#Hey,-this-is-cool,-can-I-use-this-for-my-non-Julia-related-project?)).
- clarify the license for GinacLean, laying the ground for potential future work around [Cadabra 2](https://github.com/kpeeters/cadabra2), which is licensed under GPLv3
- learn about [Kento Okura's forest and Glade](https://kentookura.srht.site/) and [Nota](https://nota-lang.org/)
}

\mdblock{2024-10-08}{
- add more plans in formal-land
- recovered [Research Codebase Manifesto](https://www.moderndescartes.com/essays/research_code/) from [Lean-MLIR](https://github.com/opencompl/lean-mlir)
- recovered [quotes from CICM 2020 Slack chat](https://gist.github.com/utensil/b4616dd5452d665318780c8a8b193dcc)
- make CubeCL example work
- add CI with WebGPU on Mac & Ubuntu thanks to `llvmpipe`, `lavapipe`, `Vulkan SDK`, `Mesa` setup by [tracel-ai/github-actions/setup-linux@v1](https://github.com/tracel-ai/github-actions/blob/v1/setup-linux/action.yml)
- found [Lorenz and modular flows: a visual introduction](https://www.josleys.com/articles/ams_article/Lorenz3.htm)
}

\mdblock{2024-10-07}{
- learned about [lobste.rs](https://lobste.rs/), a computing-focused community centered around link aggregation and discussion, a bit like Hacker News but less noise maybe
- read [Rewriting Rust](https://lobste.rs/s/29a1eo/rewriting_rust) and [Josh Triplett's comment](https://www.reddit.com/r/rust/comments/1fpomvp/rewriting_rust/lozktuv/)
- read \citef{wu2024multi} and learn about [mirage](https://github.com/mirage-project/mirage)
- port [[uts-001R]]
- make [the Railscasts theme for Zed](https://gist.github.com/utensil/a279928e07fe23558fa688ca4d82181e)
}

\mdblock{2024-10-06}{
- found [ipe](https://github.com/otfried/ipe) that is used extensively in [tungsteno](https://www.tungsteno.io/post/exp-classification_compact_surfaces/) ([source](https://github.com/TungstenHub/tngt-ipe/tree/master))
- read [Why I use TLA+ and not(TLA+)](https://protocols-made-fun.com/specification/modelchecking/tlaplus/quint/2024/10/05/tla-and-not-tla.html), learn about PlusCal, [Quint](https://quint-lang.org/) and [Apalache](https://apalache-mc.org/) (TLA+ to Z3)
- trying to figure out if TLA+ can be run in browser via [TeaVM](https://www.teavm.org/) or [CheerpJ](https://cheerpj.com/cheerpj-core/)
}

\mdblock{2024-10-05}{
- read \citef{wang2024simple}
- read \citef{estep2024rose}, and learn about \citef{paszke2021getting} [dex-lang](https://github.com/google-research/dex-lang)
- they are read on mobile app [Reflow](https://apps.apple.com/us/app/pdf-reflow/id1461144444) which has good PDF reflow support for math formulas in Arxiv papers, but not so good for other math book PDFs
}

\mdblock{2024-10-04}{
- learn about [catcolab.org](https://catcolab.org/) and double category
- learn about [Curved Diffusion: A Generative Model With Optical Geometry Control](https://anylens-diffusion.github.io/) from ECCV 2024
- read [Reusing Styles from Tailwind CSS](https://tailwindcss.com/docs/reusing-styles), decide to use it for CSS refactor
- found [vanjs](https://github.com/vanjs-org/van), considering for using it for VDOM and SSR
- learn about the game [sgued/slingshot](https://codeberg.org/sgued/slingshot) (just like a recent idea about black hole puzzle game inspired by Star Trek: Discovery)
}

\mdblock{2024-10-03}{
- Differentiable Programming
    - found [Differentiable Programming for Image Processing and Deep Learning in Halide](http://gradient.halide.ai/) and [gradient-halide autodiff](https://github.com/jrk/gradient-halide/blob/master/test/correctness/autodiff.cpp) for halide
    - read [Adelta: Automatic Differentiation for Discontinuous Programs](https://medium.com/@yutingyang.wh/adelta-automatic-differentiation-for-discontinuous-programs-de68b4bb8119) for [Að¿: Autodiff for Discontinuous Programs â Applied to Shaders](https://pixl.cs.princeton.edu/pubs/Yang_2022_AAF/) \citef{yang2022delta}
    - found [Dr.Jit](https://github.com/mitsuba-renderer/drjit)
    - found [Stan Math Library](https://github.com/stan-dev/math)
    - found [Kokkos](https://github.com/kokkos/kokkos)
    - should eval the [Rust crates](https://github.com/rose-lang/rose/tree/main/crates) of Rose
- found [mistral.rs](https://github.com/EricLBuehler/mistral.rs) for LLM inference, which uses a HF candle fork internally
- found \citef{bennett2024anything}
}

\mdblock{2024-10-01~10-02}{
- found \citef{wang2024simple} and \citef{tricard2024interval}
- work on Rust stuff, particularly read about [dioxus](https://github.com/DioxusLabs/dioxus)
}

}

\subtree[2024-09]{
\title{September, 2024}

\mdblock{2024-09-30}{
- skim [rubik-lean4](https://github.com/vihdzp/rubik-lean4) and be reminded of \citef{bonzio2018nxnxn} and \citef{salkinder2021nxnxn}
- skim [read-lean](https://github.com/madvorak/read-lean)
}

\mdblock{2024-09-29}{
- watch [Coding Adventure: Optimizing a Ray Tracer (by building a BVH)](https://www.youtube.com/watch?v=C1H4zIiCOaI) and learn about the importance of BVH in ray tracing, and [gkjohnson/three-mesh-bvh](https://github.com/gkjohnson/three-mesh-bvh)
- collect [autodiff in GPU](https://github.com/stars/utensil/lists/ad-gpu)
- submit [a bug report to Chromium](https://issues.chromium.org/issues/370153438)
- thinking about separating devlog from reading diary
- thinking about turning my playground repos to monorepos by language/stack
}

\mdblock{2024-09-27}{
- found \citef{massot2024teaching}
- noticed that [Scientific Computing in Lean](https://lecopivo.github.io/scientific-computing-lean/) is now written in Verso!
- checked some progress in [Type Checking in Lean 4](https://ammkrn.github.io/type_checking_in_lean4/)
- I should put together a list of resources for learning Lean, as I have been asked and answered this question multiple times
- improve the VSCode Forester extension to have [Hover, Go to definition, Search by title, and user-defined patterns for triggering completion](https://github.com/Trebor-Huang/vscode-forester/issues/9)
}

\mdblock{2024-09-26}{

- add [[uts-001N]]
    - read [Compiling C to WebAssembly without Emscripten](https://surma.dev/things/c-to-webassembly/) and [WebAssembly without Emscripten](https://schellcode.github.io/webassembly-without-emscripten), a bit dead-end for me
    - found [twr-wasm](https://github.com/twiddlingbits/twr-wasm), a lightweight emscripten
    - I still need to learn more about wasmer and cranelift
- add [[uts-001P]]
- learn about [monorepo tools](https://monorepo.tools/): nx seems to have most [feature-complete](https://monorepo.tools/#tools-review) support for [most stacks](https://nx.dev/getting-started/intro#pick-your-stack), moon is the next best choice for [Bun.js](https://moonrepo.dev/docs/guides/javascript/bun-handbook)+[Rust](https://moonrepo.dev/docs/guides/rust/handbook) projects that I have in mind. Other resources:
    - [Building a Monorepo with Rust](https://earthly.dev/blog/rust-monorepo/)
- I need to learn more about [Salva](https://salva.rs/): fluids simulation in Rust that works with [Rapier](https://github.com/dimforge/rapier.js/), but it doesn't seem to have a JS binding yet, rapier even has an [r3f](https://github.com/dimforge/rapier.js/) package, and a plugin for bevy. See [FLUID SIMULATION - SIGGRAPH 2007 Course Notes](https://www.cs.ubc.ca/~rbridson/fluidsimulation/fluids_notes.pdf) to learn more about fluid simulation.
- learn about [WLJS](https://jerryi.github.io/wljs-docs/) for Wolfram Mathematica, recalled [my early Mathematica notebooks](https://github.com/utensil/mathematica-notebooks), and wish to do SSR for them
}

\mdblock{2024-09-25}{
- use `biome` for linting web source files
- add [[uts-001K]]
}

\mdblock{2024-09-24}{
- add live reload
- improve various loading and WebGL animation experience
- found [David Tong: Lectures on Gauge Theory](https://www.damtp.cam.ac.uk/user/tong/gaugetheory.html)
}

\mdblock{2024-09-23}{
- more progress on [[ag-000G]], particularly on [[ag-001J]]
- found [shaderfrog](https://shaderfrog.com/)
- found [three-gpu-pathtracer](https://github.com/gkjohnson/three-gpu-pathtracer) and related projects, particularly [Physically Based Materials](https://gkjohnson.github.io/three-gpu-pathtracer/example/bundle/index.html), and that [Steve Trettel](https://x.com/stevejtrettel) uses it to render black holes and Hopf fibrations
- found \citef{yariv2020multiview} ([lioryariv/idr](https://github.com/lioryariv/idr))
}

\mdblock{2024-09-22}{
- skimmed \citef{carosso2018geometric}: "Geometric quantization is an attempt at using the differential-geometric ingredients of classical phase spaces regarded as symplectic manifolds in order to define a corresponding quantum theory."
- skimmed \citef{pinkall2024differential}: "Unlike the common approach in existing textbooks on this topic, there is a strong focus on variational problems, ranging from elastic curves to surface that minimize area or Willmore functional."
- found [demo-geodesic-heat](https://github.com/davreev/demo-geodesic-heat) and [mesh-parameterize](https://github.com/davreev/demo-mesh-parameterize)
- found \citef{broue2024rings}
}

\mdblock{2024-09-19~09-20}{
Make some progress on [[ag-000G]], particularly on mixing 4 elements (formulas, diagrams, algorithms, and readable working code).
}

\mdblock{2024-09-17}{
- skimmed \citef{love2024role} \citef{quevedo2024cambridge} \citef{faddeev2009lectures} \citef{takhtajan2008quantum} \citef{komech2019lectures}, and \citef{madrid2005role}
}

\mdblock{2024-09-16}{
- found
  - [symbolica](https://github.com/benruijl/symbolica) for Rust and Python
  - [Rusph](https://github.com/JackNarvaez/Rusph): SPH algorithm in Rust for astrophysical simulations
  - [Bevy](https://bevyengine.org/): a game engine in Rust that could also be used for simulations
- looking for materials related to ray-marching with GA, found
  - \citef{keninck2019non}
  - \citef{hadfield2021exploring}
  - \citef{karpavicius2013real}
  - \citef{nelson2017visualizing} [talk](https://www.youtube.com/watch?app=desktop&v=YpKWa8vrULk&t=1629s)
  - [pga3.glsl](https://git.sr.ht/~srasu/game_engine/tree/master/item/shader/include/pga3.glsl)
  - [Normals and the Inverse Transpose, Part 1: Grassmann Algebra](https://www.reedbeta.com/blog/normals-inverse-transpose-part-1/) in 2018
}

\mdblock{2024-09-15}{
- found [Compile Julia code to WebAssembly](https://tshort.github.io/WebAssemblyCompiler.jl/stable/)
- found [SHADERed](https://shadered.org/shaders) as another source of shader examples, particularly some are written in Rust, supported via one of its plugins
- looking for ways to include 3D models in LaTeX, found
  - asymptote
    - [that can render .obj](https://asymptote.sourceforge.io/gallery/3Dwebgl/galleon.asy)
    - [that works in Overleaf](https://www.overleaf.com/latex/templates/asymptote-3d-graphics/dkkcmszqzvcy)
  - [MeshLab](https://www.meshlab.net/) that can export models to formats supported by [media9](https://ctan.org/pkg/media9)
- watched [Mike Seddon - Rust GPU Compute](https://www.youtube.com/watch?app=desktop&v=3sk4ih0RULE&t=1608s), found
  - [Bend](https://github.com/HigherOrderCO/Bend)
  - [faer-rs](https://github.com/sarah-ek/faer-rs)
  - [cudarc](https://github.com/coreylowman/cudarc)
  - [tinygrad](https://github.com/tinygrad/tinygrad)
  - [diol](https://github.com/sarah-ek/diol): benchmarking
  - [wgpu-mm](https://github.com/FL33TW00D/wgpu-mm)
    - [Implementing Matrix Multiplication with WebGPU in Safari](https://jott.live/markdown/webgpu_safari) for optimized matrix multiplication on WebGPU
  - [Fast CUDA SGEMM from Scratch](https://github.com/siboehm/SGEMM_CUDA)
  - [linfa](https://github.com/rust-ml/linfa): `scikit-learn` in Rust
  - [gpu.cpp](https://github.com/AnswerDotAI/gpu.cpp)
  - [CubeCL](https://github.com/tracel-ai/cubecl) from Burn team
  - [Candle](https://github.com/huggingface/candle) from HF team
- read
  - [WebGPU â All of the cores, none of the canvas](https://surma.dev/things/webgpu/)
  - [How to Optimize a CUDA Matmul Kernel for cuBLAS-like Performance: a Worklog](https://siboehm.com/articles/22/CUDA-MMM)
  - [Autotune for GPU Kernels: Ensuring Consistent Peak Performance](https://burn.dev/blog/autotune-for-gpu-kernels/) from Burn team
  - [WebGPU Compute Shader Basics](https://webgpufundamentals.org/webgpu/lessons/webgpu-compute-shaders.html)
- work through [WebGPU Puzzles](https://gpupuzzles.answer.ai/)
- learned about [APL](https://xpqz.github.io/learnapl/intro.html) and [BQN](https://mlochbaum.github.io/BQN/index.html)
- read a portion of [The Dao Of FP](https://github.com/BartoszMilewski/Publications/tree/master/TheDaoOfFP)
- learned about [fpgatoy](https://github.com/davidar/fpgatoy)
}

\mdblock{2024-09-12~09-14}{
- make a start on [[ag-000G]]
- make [[ag-000O]]
}

\mdblock{2024-09-11}{
- trying to figure out curvature calculation in shaders
  - [Screen Space Curvature Shader](https://madebyevan.com/shaders/curvature/) is a trick to mimic curvature calculation in shaders,using [dFdx, dFdy in GLSL](https://registry.khronos.org/OpenGL-Refpages/gl4/html/dFdx.xhtml), [Curvature shader by iY0Yi](https://www.shadertoy.com/view/fsGXzc) used it but it shows certain shower door effect
  - [glsl-autodiff](https://github.com/sibaku/glsl-autodiff) properly uses forward auto differentiation to calculate curvature in shaders, but it requires rewrite every math function for bookkeeping the gradient and the Hessian
}

\mdblock{2024-09-10}{
- work out shader for [[uts-001D]]
- inspired by [Surface Plotter](https://github.com/jaxry/surface-plotter) ([demo](https://jaxry.github.io/surface-plotter/)), read
  - [Marching Cubes](http://algorithm-interest-group.com/assets/slides/marching_cubes.pdf)
  - [Polygonising a scalar field](https://paulbourke.net/geometry/polygonise/)
  - [CIS700 Procedural Graphics: Implicit surfaces - Marching cubes](https://cis700-procedural-graphics.github.io/assignments/proj6-marchingcubes/)
  - [Marching Cubes Part 1: Explaining marching cubes](https://polycoding.net/marching-cubes/part-1/)
}

\mdblock{2024-09-09}{
- add `egglog` and `ginac`, and streamline the build process of Rust WASM dependencies
- reading source of projects using egg: `jafioti/luminal`, `marcusrossel/lean-egg`, `verified-optimization/CvxLean` etc. TODO: read more egg papers: \citef{rossel2024bridging}\citef{rossel2024equality}\citef{bentkamp2023verified}
}

\mdblock{2024-09-08}{
- mark candidates for rendering PDB: [[uts-001A]]
- fail to run Z3 in browser (due to `SharedArrayBuffer` again)
- read the source of examples of [uwal](https://github.com/UstymUkhman/uwal) and the corresponding articles at [webgpufundamentals.org](https://webgpufundamentals.org/)
- [[uts-001B]] and [[uts-001C]]
}

\mdblock{2024-09-07}{
- Skim through \citef{lengyel2024foundations}
- experiments on compute shaders
}

\mdblock{2024-09-06}{
- Polish [[ca-0001]]
- Some more on [[uts-000C]]
- Re-skim \citef{trautman1997clifford}
- Read \citef{baez2010algebra} and make 97 notes
- [Notes on Distributed Systems for Young Bloods (2013)](https://www.somethingsimilar.com/2013/01/14/notes-on-distributed-systems-for-young-bloods/)
}

\block{2024-09-05}{
\ul{
\li{Ported the rest of the prelimilary part of \citef{wieser2024blueprint} to [[ca-0001]], except [#{Z_2}-graded derivations #{i_f}, anti-derivation](https://utensil.github.io/lean-ga/blueprint/sec-ops.html#antiDeriv)
}
\li{Make a start on [[spin-0010]]}
}
}

\mdblock{2024-09-04}{
- \citef{hamilton2023supergeometric} and \citef{hamilton2023unification}: illuminating path towards a unified theory of four fundamental forces, the first theory seemingly capable of reaching the same level of elegance and simplicity as \citef{wilson2024discrete}, the authors are also aware of potential issues and worked out viable solutions to address them. Unfortunately, there are no citations as of now.
  - \citef{trautman1997clifford} has certain historical remarks and a unusual approach that spinor representations are treated first for odd-dimensional spaces
spaces
- \citef{henry2024geometry} (found on Mar 11, 2025 again)
- \citef{ahle2024tensor} and [Graphical tensor notation for interpretability](https://www.lesswrong.com/posts/BQKKQiBmc63fwjDrj/graphical-tensor-notation-for-interpretability)
- [The Calculus of Variations and Geometry: a Historical Perspective](https://people.cmm.minesparis.psl.eu/users/velasco/JPB.pdf)
- Data-driven linearization of dynamical systems
- Meta Flow Matching: Integrating Vector Fields on the Wasserstein Manifold
}

\mdblock{2024-09-03}{
- \citet{ch. 1-4}{grassmann2000extension}
- \citet{sec. 1.1-2.8}{browne2012grassmann}
- \citef{loret2024universe}
- some slides of [AGACSE 2024](https://staff.science.uva.nl/l.dorst/AGACSE2024/programme/index.html)
  - The Willing Kingdon Clifford Algebra Library
  - Look, Ma, No Matrices!
  - Spacetime Algebra and Octonions: Links with the groups used in particle physics and computer graphics
  - Construction of Exceptional Lie Algebra G2 and Non-Associative Algebras using Clifford Algebra
  - On Multidimensional Dirac-Hestenes Equation
  - On Rank of Multivectors in Geometric Algebra
  - From Null Monomials to Versors in Conformal Geometry
  - Look, Ma, No Trigonometry!
  - Dual Spaces are Real: Orientation Types in Geometric Algebras
  - On Generalized Degenerate Lipschitz and Spin Groups
  - Projective and Conformal Formulations of Electromagnetism
  - Representation and Gauge Freedom in Electromagnetism and Acoustics
  - Pencils and set operators in 3D CGA
  - Factorizations of the Conformal Villarceau Motion
}

}

\subtree[2024-01~08]{
\title{January to August, 2024}

\mdblock{2024-08-11~08-31}{
The readings during this period are reflected in

- [[uts-000G]]
- [[uts-000H]]

Many experiments on Forester are done, as summarized in [[uts-000X]].

}


\mdblock{2024-07-27~08-11}{
The readings during this period are yet to be reflected in [[ag-0001]].
}

\mdblock{2024-05-09~07-27}{
The readings during this period are reflected in [[tt-0001]].

[[uts-000C]] was ported to Forester on 07-22.
}

\mdblock{2024-04-25~05-24}{
The readings during this period are reflected in [[spin-0001]]. Some are yet to be reflected in [[hopf-0001]].
}

\mdblock{2024-01-01~06-14}{
The readings during this period are reflected in

- [My math interests in 2024](https://utensil.github.io/blog/posts/math-2024/)
- [Studying group algebras with GAP](https://utensil.github.io/blog/posts/group-algebra/)
- [Notes on Zeon Algebra](https://utensil.github.io/blog/posts/zeon-algebra/)
}
}

}

\subtree[2023]{
\title{Year 2023}
\subtree[2023-09~12]{
\title{September to December, 2023}
\md{
I was working on Lean related projects during this period, my readings are partially reflected in my [Lean 4 Playground](https://utensil.github.io/formal-land/lean4/), but most of the time I was reading [Lean's Zulip Chat messages](https://leanprover.zulipchat.com/). Maybe one day I should archive my stars on Zulip Chat.
}
}
\subtree[2023-02~08]{
\title{February to August, 2023}
\md{
The readings during this period are reflected in

- my [LLM Daily Picks](https://github.com/utensil/llm-playground/blob/main/daily_picks.md)
- my blog post [Transformers: from self-attention to performance optimizations](https://utensil.github.io/blog/posts/transformer/)
}
}
}

\block{Year 2014~2023}{
The interests during this period are reflected in [[uts-0166]].
}

}
