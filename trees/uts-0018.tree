\import{macros}
% clifford hopf spin tt ag math draft tech exp notes readings
\tag{root}
% \meta{permlink}{reading-diary}

\put\transclude/numbered{false}

\note{learning diary}{
\p{I wish to keep a learning diary, to keep track of partial reading progress, and things learned during making things.
}

\subtree[2024]{
\title{Year 2024}

\subtree[2024-12]{
\title{December, 2024}

\mdblock{12-12}{
- read [How wide is a proof?](https://robwilson1.wordpress.com/2024/12/07/how-wide-is-a-proof/)
- found [Notes on Geometric Algebra](https://github.com/cloudcell/GA_Notes)
- skimmed \citek{wang2024agents} and related papers
}

\mdblock{12-09~12-11}{
- 🚧 busy
- reading 📘*Zen and the Art of Motorcycle Maintenance: An Inquiry into Values*
}

\mdblock{12-01~12-08}{
- try Deepseek Deep Think, add [[uts-002I]]
- rethinking self-hosted git repos, CI, and pages, found
    - [Forgejo](https://code.readeck.org/)
    - [GitHub Pages App](https://docs.cloudron.io/apps/githubpages/) on Cloudron
- try using aider to [write Rust script](https://github.com/utensil/forest/compare/9bc1724154aa576b6bd2979e40adc94325522aaf...rust-script-aider), not so good
    - based on [an AoC Rust script example](https://github.com/ChristopherBiscardi/advent-of-code/blob/bc5ad528576194355f2fb1b6a03091d8bcd69f76/2024/rust/scripts/get-aoc-input.rs)
    - try QwQ
- try [copilot-more](https://github.com/jjleng/copilot-more), maybe settle on it
- read [Clifford algebra or Lie algebra?](https://robwilson1.wordpress.com/2024/11/30/clifford-algebra-or-lie-algebra/)
- learn a bit more about Slang, V, and Lobster
- watch [Really amazing talk by Tomasz Stachowiak: Rendering Tiny Glades With Entirely Too Much Ray Marching](https://www.youtube.com/watch?v=jusWW2pPnA0&ab_channel=GraphicsProgrammingConference)
- read [The Door ProblemA](https://lizengland.com/blog/2014/04/the-door-problem/) from [awesome-falsehood](https://github.com/kdeldycke/awesome-falsehood)
}

}

\subtree[2024-11]{
\title{November, 2024}

\mdblock{11-29}{
- read [Optimizing a Rust GPU matmul kernel](https://rust-gpu.github.io/blog/optimizing-matmul/)
}

\mdblock{11-28}{
- found \citek{broden2024knots} \citek{etingof2024mathematical}
- found [Applied Linear Algebra and Differential Equations - Lecture notes for MATH 2350](https://www.math.hkust.edu.hk/~machas/applied-linear-algebra-and-differential-equations.pdf) by Jeffrey R. Chasnov
- found [Competitive Programmer's Handbook](https://github.com/pllk/cphb)
}

\mdblock{11-27}{
- read [Haskell: A Great Procedural Language](https://entropicthoughts.com/haskell-procedural-programming)
}

\mdblock{11-23~11-26}{
- 🚧 busy
}

\mdblock{11-22}{
- found [Slang](https://github.com/shader-slang/slang)
- read [Exploring Async Runtimes by Building our Own](https://blog.maguire.tech/posts/explorations/exploring-async-runtimes/)
- found \citek{collas2018dirac}
}

\mdblock{11-21}{
- found [Impala](https://anydsl.github.io/Impala.html)
    - skimmed \citek{leissa2018anydsl} \citek{perard2017ratrace}
    - related:
        - [shady](https://github.com/shady-gang/shady)
        - [Vulkan Clang Compiler](https://shady-gang.github.io/vcc/)
}

\mdblock{11-20}{
- skimmed \citek{pepe2024staresnet} and \citek{filimoshina2024note}
}

\mdblock{11-12~11-19}{
- experiments on using [aider](https://aider.chat/) for LLM assisted project-level pair programming
    - [this PR](https://github.com/utensil/lean4_jupyter/pull/2) is a most extensive one
- finish citation trace for GAlgebra, see [this PR](https://github.com/pygae/galgebra/pull/528) for relevant readings
- found \citek{riccardo2024towards}, Cat for DL
- found [Cario](https://www.cairo-lang.org/), a provable Rust-like language
}

\mdblock{11-11}{
- found [Bartosz Ciechanowski's blog](https://ciechanow.ski/)
- found \citek{michor2008topics}\citek{milne2012algebraic}, helpful for [[ag-0001]]
- plan to read \citek{mosto2024templex}
}

\mdblock{11-10}{
- contemplate the idea of better file management with Rust
- meet datachain, extism, revisit mage-ai, should evaluate kestra, contemplate the idea of ML orchestration with Rust where each node is a WASM plugin, [BAML](https://github.com/BoundaryML/baml) has some potential
- wish to get back more on Lean and Math in this month
}

\mdblock{11-08~11-09}{
- 🌴
- contemplate the idea of a bot to keep me going back to work on my projects, triggered by
    - an update of a related project
    - more than a month of inactivity
        - on the repo
        - or on a recent opened issue
- read [gccrs: An alternative compiler for Rust](https://blog.rust-lang.org/2024/11/07/gccrs-an-alternative-compiler-for-rust.html)
}

\mdblock{11-07}{
- read [Isa Proof Shell](https://github.com/xqyww123/Isa-Proof-Shell)
}

\mdblock{11-06}{
- read [Forester 5.x git log](https://git.sr.ht/~jonsterling/ocaml-forester/log/forester-5.0-dev), not bumping to 5.x yet
- evaluate [HTMX](https://htmx.org/server-examples/) a bit
- read [Why not just embed Neovim?](https://zed.dev/blog/zed-decoded-vim), will need to revisit Zed later
- read [RustGPU: Pros&Cons](https://github.com/schell/renderling/blob/main/NOTES.md#cons--limititions--gotchas), the author [becomes a maintainer of RustGPU](https://rust-gpu.github.io/blog/2024/11/06/new-maintainers/)
- found [VR Schwarzschild black hole shader (works with SPS and SPS-I)](https://gist.github.com/MichaelMoroz/b35d456056f3b958962ffb93f37ac55c)
}
}

\subtree[2024-10]{
\title{October, 2024}

\mdblock{10-30~10-31}{
- finish [[uts-002H]]
}

\mdblock{10-25~10-29}{
- work on native-land
    - trying to make GA and math benchmark work, also evaluating the feasibility of benchmarking C++ libraries from Rust
    - pass CI on runpod
- work on formal-land, make Verso work
- debug various TUI tools
}

\mdblock{10-18~10-24}{
- work on native-land, trying to make rust-gpu fully work
- work on formal-land, trying to establish the infrastructure to explore multiple Lean 4 projects with independent toolchains and dependencies
- switching to Neovim, make it work for Rust, Lean, and forester
- write [[uts-002F]]
- skim [The Lean Language Reference](https://lean-lang.org/doc/reference/latest/)
- start reading [Modern C++ Programming Course (C++03/11/14/17/20/23/26)](https://github.com/federico-busato/Modern-CPP-Programming)
}

\mdblock{10-17}{
- initial citation trace for \citek{james2015gravitational} and \citek{james2015visualizing}
- read \citek{meseguer2023custom} (Vulkan, Ray-marching, Kerr black hole) [lrogerorrit/narwhalEngine](https://github.com/lrogerorrit/narwhalEngine)
- read \citek{bruneton2020real} (CPU precal, WebGL2, Schwarzschild black hole) [ebruneton/black_hole_shader](https://github.com/ebruneton/black_hole_shader)
- skimmed \citek{fang2024identifying}
- learn about \citek{haftmann2013haskell}: the type class for Isabelle, but its expressiveness is limited, see discussions in \citek{schmoetten2024construction}
}

\mdblock{10-16}{
- read \citek{siskind2019automatic} and \citek{naumann2024matrix}, seems limited, but have some good references
- skim \citek{low2023gafro} (good library and benchmark) and \citek{eid2024developing} (good refs, but in C#)
- skim \citek{sharma2024comprehensive}, an interesting area with sparse tensors as an in-memory database in mind
- skim \citek{zhao2024felix} ([uiuc-arc/felix](https://github.com/uiuc-arc/felix)), which uses egg
}

\mdblock{10-15}{
- found \citek{raptis2024functoriality}
- found \citek{shaikhha2024tensor} and \citek{zhao2024felix}
- SDQLite \citek{schleich2023optimizing} (based on [SDQL](https://github.com/edin-dal/sdql)) is an intermediate language that expresses sparse tensor workloads by separating the tensoropt computations from the storage formats
- reminds me of \citek{wu2024multi}
}

\mdblock{10-11~10-14}{
- work on [native-land](https://github.com/utensil/native-land) about GPU computation, see relavant README updates.
}

\mdblock{10-10}{
- watch [Chris Biscardi - Bevy: A case study in ergonomic Rust](https://www.youtube.com/watch?v=CnoDOc6ML0Y)
- have a better idea about the game about fly, evade, slingshot, and shoot around black holes, 4D implicit surfaces
- explore [sketchfab](https://sketchfab.com/3d-models/black-hole-e410da98b1e5445eae2acafaaa53587d), [polyhaven](https://polyhaven.com/), and [openverse](https://openverse.org/), and have a basic idea about how to use them in the early stage of the game
- learn about [itch.io](https://itch.io/) to surveying existing games, and a [open revenue sharing](https://itch.io/updates/introducing-open-revenue-sharing) platform to release games
- found \citek{garrity2013algebraic}
}

\mdblock{10-09}{
- read [C++ Package Managers: The Ultimate Roundup](https://moderncppdevops.com/pkg-mngr-roundup/), and start using [xrepo](https://xrepo.xmake.io/) for C/C++ package management, it also supports a wide range of [package repositories](https://xmake.io/#/home?id=supported-package-repositories), including Conan, Conda, Vcpkg, Homebrew, Apt, and Cargo. But not [BinaryBuilder.jl ecosystem](https://github.com/JuliaPackaging/BinaryBuilder.jl) (see also [this FAQ](https://docs.binarybuilder.org/dev/FAQ/#Hey,-this-is-cool,-can-I-use-this-for-my-non-Julia-related-project?)).
- clarify the license for GinacLean, laying the ground for potential future work around [Cadabra 2](https://github.com/kpeeters/cadabra2), which is licensed under GPLv3
- learn about [Kento Okura's forest and Glade](https://kentookura.srht.site/) and [Nota](https://nota-lang.org/)
}

\mdblock{10-08}{
- add more plans in formal-land
- recovered [Research Codebase Manifesto](https://www.moderndescartes.com/essays/research_code/) from [Lean-MLIR](https://github.com/opencompl/lean-mlir)
- recovered [quotes from CICM 2020 Slack chat](https://gist.github.com/utensil/b4616dd5452d665318780c8a8b193dcc)
- make CubeCL example work
- add CI with WebGPU on Mac & Ubuntu thanks to `llvmpipe`, `lavapipe`, `Vulkan SDK`, `Mesa` setup by [tracel-ai/github-actions/setup-linux@v1](https://github.com/tracel-ai/github-actions/blob/v1/setup-linux/action.yml)
- found [Lorenz and modular flows: a visual introduction](https://www.josleys.com/articles/ams_article/Lorenz3.htm)
}

\mdblock{10-07}{
- learned about [lobste.rs](https://lobste.rs/), a computing-focused community centered around link aggregation and discussion, a bit like Hacker News but less noise maybe
- read [Rewriting Rust](https://lobste.rs/s/29a1eo/rewriting_rust) and [Josh Triplett's comment](https://www.reddit.com/r/rust/comments/1fpomvp/rewriting_rust/lozktuv/)
- read \citek{wu2024multi} and learn about [mirage](https://github.com/mirage-project/mirage)
- port [[uts-001R]]
- make [the Railscasts theme for Zed](https://gist.github.com/utensil/a279928e07fe23558fa688ca4d82181e)
}

\mdblock{10-06}{
- found [ipe](https://github.com/otfried/ipe) that is used extensively in [tungsteno](https://www.tungsteno.io/post/exp-classification_compact_surfaces/) ([source](https://github.com/TungstenHub/tngt-ipe/tree/master))
- read [Why I use TLA+ and not(TLA+)](https://protocols-made-fun.com/specification/modelchecking/tlaplus/quint/2024/10/05/tla-and-not-tla.html), learn about PlusCal, [Quint](https://quint-lang.org/) and [Apalache](https://apalache-mc.org/) (TLA+ to Z3)
- trying to figure out if TLA+ can be run in browser via [TeaVM](https://www.teavm.org/) or [CheerpJ](https://cheerpj.com/cheerpj-core/)
}

\mdblock{10-05}{
- read \citek{wang2024simple}
- read \citek{estep2024rose}, and learn about \citek{paszke2021getting} [dex-lang](https://github.com/google-research/dex-lang)
- they are read on mobile app [Reflow](https://apps.apple.com/us/app/pdf-reflow/id1461144444) which has good PDF reflow support for math formulas in Arxiv papers, but not so good for other math book PDFs
}

\mdblock{10-04}{
- learn about [catcolab.org](https://catcolab.org/) and double category
- learn about [Curved Diffusion: A Generative Model With Optical Geometry Control](https://anylens-diffusion.github.io/) from ECCV 2024
- read [Reusing Styles from Tailwind CSS](https://tailwindcss.com/docs/reusing-styles), decide to use it for CSS refactor
- found [vanjs](https://github.com/vanjs-org/van), considering for using it for VDOM and SSR
- learn about the game [sgued/slingshot](https://codeberg.org/sgued/slingshot) (just like a recent idea about black hole puzzle game inspired by Star Trek: Discovery)
}

\mdblock{10-03}{
- Differentiable Programming
    - found [Differentiable Programming for Image Processing and Deep Learning in Halide](http://gradient.halide.ai/) and [gradient-halide autodiff](https://github.com/jrk/gradient-halide/blob/master/test/correctness/autodiff.cpp) for halide
    - read [Adelta: Automatic Differentiation for Discontinuous Programs](https://medium.com/@yutingyang.wh/adelta-automatic-differentiation-for-discontinuous-programs-de68b4bb8119) for [A𝛿: Autodiff for Discontinuous Programs – Applied to Shaders](https://pixl.cs.princeton.edu/pubs/Yang_2022_AAF/) \citek{yang2022delta}
    - found [Dr.Jit](https://github.com/mitsuba-renderer/drjit)
    - found [Stan Math Library](https://github.com/stan-dev/math)
    - found [Kokkos](https://github.com/kokkos/kokkos)
    - should eval the [Rust crates](https://github.com/rose-lang/rose/tree/main/crates) of Rose
- found [mistral.rs](https://github.com/EricLBuehler/mistral.rs) for LLM inference, which uses a HF candle fork internally
- found \citek{bennett2024anything}
}

\mdblock{10-01~10-02}{
- found \citek{wang2024simple} and \citek{tricard2024interval}
- work on Rust stuff, particularly read about [dioxus](https://github.com/DioxusLabs/dioxus)
}

}

\subtree[2024-09]{
\title{September, 2024}

\mdblock{09-30}{
- skim [rubik-lean4](https://github.com/vihdzp/rubik-lean4) and be reminded of \citek{bonzio2018nxnxn} and \citek{salkinder2021nxnxn}
- skim [read-lean](https://github.com/madvorak/read-lean)
}

\mdblock{09-29}{
- watch [Coding Adventure: Optimizing a Ray Tracer (by building a BVH)](https://www.youtube.com/watch?v=C1H4zIiCOaI) and learn about the importance of BVH in ray tracing, and [gkjohnson/three-mesh-bvh](https://github.com/gkjohnson/three-mesh-bvh)
- collect [autodiff in GPU](https://github.com/stars/utensil/lists/ad-gpu)
- submit [a bug report to Chromium](https://issues.chromium.org/issues/370153438)
- thinking about separating devlog from reading diary
- thinking about turning my playground repos to monorepos by language/stack
}

\mdblock{09-27}{
- found \citek{massot2024teaching}
- noticed that [Scientific Computing in Lean](https://lecopivo.github.io/scientific-computing-lean/) is now written in Verso!
- checked some progress in [Type Checking in Lean 4](https://ammkrn.github.io/type_checking_in_lean4/)
- I should put together a list of resources for learning Lean, as I have been asked and answered this question multiple times
- improve the VSCode Forester extension to have [Hover, Go to definition, Search by title, and user-defined patterns for triggering completion](https://github.com/Trebor-Huang/vscode-forester/issues/9)
}

\mdblock{09-26}{

- add [[uts-001N]]
    - read [Compiling C to WebAssembly without Emscripten](https://surma.dev/things/c-to-webassembly/) and [WebAssembly without Emscripten](https://schellcode.github.io/webassembly-without-emscripten), a bit dead-end for me
    - found [twr-wasm](https://github.com/twiddlingbits/twr-wasm), a lightweight emscripten
    - I still need to learn more about wasmer and cranelift
- add [[uts-001P]]
- learn about [monorepo tools](https://monorepo.tools/): nx seems to have most [feature-complete](https://monorepo.tools/#tools-review) support for [most stacks](https://nx.dev/getting-started/intro#pick-your-stack), moon is the next best choice for [Bun.js](https://moonrepo.dev/docs/guides/javascript/bun-handbook)+[Rust](https://moonrepo.dev/docs/guides/rust/handbook) projects that I have in mind. Other resources:
    - [Building a Monorepo with Rust](https://earthly.dev/blog/rust-monorepo/)
- I need to learn more about [Salva](https://salva.rs/): fluids simulation in Rust that works with [Rapier](https://github.com/dimforge/rapier.js/), but it doesn't seem to have a JS binding yet, rapier even has an [r3f](https://github.com/dimforge/rapier.js/) package, and a plugin for bevy. See [FLUID SIMULATION - SIGGRAPH 2007 Course Notes](https://www.cs.ubc.ca/~rbridson/fluidsimulation/fluids_notes.pdf) to learn more about fluid simulation.
- learn about [WLJS](https://jerryi.github.io/wljs-docs/) for Wolfram Mathematica, recalled [my early Mathematica notebooks](https://github.com/utensil/mathematica-notebooks), and wish to do SSR for them
}

\mdblock{09-25}{
- use `biome` for linting web source files
- add [[uts-001K]]
}

\mdblock{09-24}{
- add live reload
- improve various loading and WebGL animation experience
- found [David Tong: Lectures on Gauge Theory](https://www.damtp.cam.ac.uk/user/tong/gaugetheory.html)
}

\mdblock{09-23}{
- more progress on [[ag-000G]], particularly on [[ag-001J]]
- found [shaderfrog](https://shaderfrog.com/)
- found [three-gpu-pathtracer](https://github.com/gkjohnson/three-gpu-pathtracer) and related projects, particularly [Physically Based Materials](https://gkjohnson.github.io/three-gpu-pathtracer/example/bundle/index.html), and that [Steve Trettel](https://x.com/stevejtrettel) uses it to render black holes and Hopf fibrations
- found \citek{yariv2020multiview} ([lioryariv/idr](https://github.com/lioryariv/idr))
}

\mdblock{09-22}{
- skimmed \citek{carosso2018geometric}: "Geometric quantization is an attempt at using the differential-geometric ingredients of classical phase spaces regarded as symplectic manifolds in order to define a corresponding quantum theory."
- skimmed \citek{pinkall2024differential}: "Unlike the common approach in existing textbooks on this topic, there is a strong focus on variational problems, ranging from elastic curves to surface that minimize area or Willmore functional."
- found [demo-geodesic-heat](https://github.com/davreev/demo-geodesic-heat) and [mesh-parameterize](https://github.com/davreev/demo-mesh-parameterize)
- found \citek{broue2024rings}
}

\mdblock{09-19~09-20}{
Make some progress on [[ag-000G]], particularly on mixing 4 elements (formulas, diagrams, algorithms, and readable working code).
}

\mdblock{09-17}{
- skimmed \citek{love2024role} \citek{quevedo2024cambridge} \citek{faddeev2009lectures} \citek{takhtajan2008quantum} \citek{komech2019lectures}, and \citek{madrid2005role}
}

\mdblock{09-16}{
- found
  - [symbolica](https://github.com/benruijl/symbolica) for Rust and Python
  - [Rusph](https://github.com/JackNarvaez/Rusph): SPH algorithm in Rust for astrophysical simulations
  - [Bevy](https://bevyengine.org/): a game engine in Rust that could also be used for simulations
- looking for materials related to ray-marching with GA, found
  - \citek{keninck2019non}
  - \citek{hadfield2021exploring}
  - \citek{karpavicius2013real}
  - \citek{nelson2017visualizing} [talk](https://www.youtube.com/watch?app=desktop&v=YpKWa8vrULk&t=1629s)
  - [pga3.glsl](https://git.sr.ht/~srasu/game_engine/tree/master/item/shader/include/pga3.glsl)
  - [Normals and the Inverse Transpose, Part 1: Grassmann Algebra](https://www.reedbeta.com/blog/normals-inverse-transpose-part-1/) in 2018
}

\mdblock{09-15}{
- found [Compile Julia code to WebAssembly](https://tshort.github.io/WebAssemblyCompiler.jl/stable/)
- found [SHADERed](https://shadered.org/shaders) as another source of shader examples, particularly some are written in Rust, supported via one of its plugins
- looking for ways to include 3D models in LaTeX, found
  - asymptote
    - [that can render .obj](https://asymptote.sourceforge.io/gallery/3Dwebgl/galleon.asy)
    - [that works in Overleaf](https://www.overleaf.com/latex/templates/asymptote-3d-graphics/dkkcmszqzvcy)
  - [MeshLab](https://www.meshlab.net/) that can export models to formats supported by [media9](https://ctan.org/pkg/media9)
- watched [Mike Seddon - Rust GPU Compute](https://www.youtube.com/watch?app=desktop&v=3sk4ih0RULE&t=1608s), found
  - [Bend](https://github.com/HigherOrderCO/Bend)
  - [faer-rs](https://github.com/sarah-ek/faer-rs)
  - [cudarc](https://github.com/coreylowman/cudarc)
  - [tinygrad](https://github.com/tinygrad/tinygrad)
  - [diol](https://github.com/sarah-ek/diol): benchmarking
  - [wgpu-mm](https://github.com/FL33TW00D/wgpu-mm)
    - [Implementing Matrix Multiplication with WebGPU in Safari](https://jott.live/markdown/webgpu_safari) for optimized matrix multiplication on WebGPU
  - [Fast CUDA SGEMM from Scratch](https://github.com/siboehm/SGEMM_CUDA)
  - [linfa](https://github.com/rust-ml/linfa): `scikit-learn` in Rust
  - [gpu.cpp](https://github.com/AnswerDotAI/gpu.cpp)
  - [CubeCL](https://github.com/tracel-ai/cubecl) from Burn team
  - [Candle](https://github.com/huggingface/candle) from HF team
- read
  - [WebGPU — All of the cores, none of the canvas](https://surma.dev/things/webgpu/)
  - [How to Optimize a CUDA Matmul Kernel for cuBLAS-like Performance: a Worklog](https://siboehm.com/articles/22/CUDA-MMM)
  - [Autotune for GPU Kernels: Ensuring Consistent Peak Performance](https://burn.dev/blog/autotune-for-gpu-kernels/) from Burn team
  - [WebGPU Compute Shader Basics](https://webgpufundamentals.org/webgpu/lessons/webgpu-compute-shaders.html)
- work through [WebGPU Puzzles](https://gpupuzzles.answer.ai/)
- learned about [APL](https://xpqz.github.io/learnapl/intro.html) and [BQN](https://mlochbaum.github.io/BQN/index.html)
- read a portion of [The Dao Of FP](https://github.com/BartoszMilewski/Publications/tree/master/TheDaoOfFP)
- learned about [fpgatoy](https://github.com/davidar/fpgatoy)
}

\mdblock{09-12~09-14}{
- make a start on [[ag-000G]]
- make [[ag-000O]]
}

\mdblock{09-11}{
- trying to figure out curvature calculation in shaders
  - [Screen Space Curvature Shader](https://madebyevan.com/shaders/curvature/) is a trick to mimic curvature calculation in shaders,using [dFdx, dFdy in GLSL](https://registry.khronos.org/OpenGL-Refpages/gl4/html/dFdx.xhtml), [Curvature shader by iY0Yi](https://www.shadertoy.com/view/fsGXzc) used it but it shows certain shower door effect
  - [glsl-autodiff](https://github.com/sibaku/glsl-autodiff) properly uses forward auto differentiation to calculate curvature in shaders, but it requires rewrite every math function for bookkeeping the gradient and the Hessian
}

\mdblock{09-10}{
- work out shader for [[uts-001D]]
- inspired by [Surface Plotter](https://github.com/jaxry/surface-plotter) ([demo](https://jaxry.github.io/surface-plotter/)), read
  - [Marching Cubes](http://algorithm-interest-group.com/assets/slides/marching_cubes.pdf)
  - [Polygonising a scalar field](https://paulbourke.net/geometry/polygonise/)
  - [CIS700 Procedural Graphics: Implicit surfaces - Marching cubes](https://cis700-procedural-graphics.github.io/assignments/proj6-marchingcubes/)
  - [Marching Cubes Part 1: Explaining marching cubes](https://polycoding.net/marching-cubes/part-1/)
}

\mdblock{09-09}{
- add `egglog` and `ginac`, and streamline the build process of Rust WASM dependencies
- reading source of projects using egg: `jafioti/luminal`, `marcusrossel/lean-egg`, `verified-optimization/CvxLean` etc. TODO: read more egg papers: \citek{rossel2024bridging}\citek{rossel2024equality}\citek{bentkamp2023verified}
}

\mdblock{09-08}{
- mark candidates for rendering PDB: [[uts-001A]]
- fail to run Z3 in browser (due to `SharedArrayBuffer` again)
- read the source of examples of [uwal](https://github.com/UstymUkhman/uwal) and the corresponding articles at [webgpufundamentals.org](https://webgpufundamentals.org/)
- [[uts-001B]] and [[uts-001C]]
}

\mdblock{09-07}{
- Skim through \citek{lengyel2024foundations}
- experiments on compute shaders
}

\mdblock{09-06}{
- Polish [[ca-0001]]
- Some more on [[uts-000C]]
- Re-skim \citek{trautman1997clifford}
- Read \citek{baez2010algebra} and make 97 notes
- [Notes on Distributed Systems for Young Bloods (2013)](https://www.somethingsimilar.com/2013/01/14/notes-on-distributed-systems-for-young-bloods/)
}

\block{09-05}{
\ul{
\li{Ported the rest of the prelimilary part of \citek{wieser2024blueprint} to [[ca-0001]], except [#{Z_2}-graded derivations #{i_f}, anti-derivation](https://utensil.github.io/lean-ga/blueprint/sec-ops.html#antiDeriv)
}
\li{Make a start on [[spin-0010]]}
}
}

\mdblock{09-04}{
- \citek{hamilton2023supergeometric} and \citek{hamilton2023unification}: illuminating path towards a unified theory of four fundamental forces, the first theory seemingly capable of reaching the same level of elegance and simplicity as \citek{wilson2024discrete}, the authors are also aware of potential issues and worked out viable solutions to address them. Unfortunately, there are no citations as of now.
  - \citek{trautman1997clifford} has certain historical remarks and a unusual approach that spinor representations are treated first for odd-dimensional spaces
spaces
- \citek{henry2024geometry}
- \citek{ahle2024tensor} and [Graphical tensor notation for interpretability](https://www.lesswrong.com/posts/BQKKQiBmc63fwjDrj/graphical-tensor-notation-for-interpretability)
- [The Calculus of Variations and Geometry: a Historical Perspective](https://people.cmm.minesparis.psl.eu/users/velasco/JPB.pdf)
- Data-driven linearization of dynamical systems
- Meta Flow Matching: Integrating Vector Fields on the Wasserstein Manifold
}

\mdblock{09-03}{
- \citet{ch. 1-4}{grassmann2000extension}
- \citet{sec. 1.1-2.8}{browne2012grassmann}
- \citek{loret2024universe}
- some slides of [AGACSE 2024](https://staff.science.uva.nl/l.dorst/AGACSE2024/programme/index.html)
  - The Willing Kingdon Clifford Algebra Library
  - Look, Ma, No Matrices!
  - Spacetime Algebra and Octonions: Links with the groups used in particle physics and computer graphics
  - Construction of Exceptional Lie Algebra G2 and Non-Associative Algebras using Clifford Algebra
  - On Multidimensional Dirac-Hestenes Equation
  - On Rank of Multivectors in Geometric Algebra
  - From Null Monomials to Versors in Conformal Geometry
  - Look, Ma, No Trigonometry!
  - Dual Spaces are Real: Orientation Types in Geometric Algebras
  - On Generalized Degenerate Lipschitz and Spin Groups
  - Projective and Conformal Formulations of Electromagnetism
  - Representation and Gauge Freedom in Electromagnetism and Acoustics
  - Pencils and set operators in 3D CGA
  - Factorizations of the Conformal Villarceau Motion
}

}

\subtree[2024-01~08]{
\title{January to August, 2024}

\mdblock{08-11~08-31}{
The readings during this period are reflected in

- [[uts-000G]]
- [[uts-000H]]

Many experiments on Forester are done, as summarized in [[uts-000X]].

}


\mdblock{07-27~08-11}{
The readings during this period are yet to be reflected in [[ag-0001]].
}

\mdblock{05-09~07-27}{
The readings during this period are reflected in [[tt-0001]].

[[uts-000C]] was ported to Forester on 07-22.
}

\mdblock{04-25~05-24}{
The readings during this period are reflected in [[spin-0001]]. Some are yet to be reflected in [[hopf-0001]].
}

\mdblock{01-01~06-14}{
The readings during this period are reflected in

- [My math interests in 2024](https://utensil.github.io/blog/posts/math-2024/)
- [Studying group algebras with GAP](https://utensil.github.io/blog/posts/group-algebra/)
- [Notes on Zeon Algebra](https://utensil.github.io/blog/posts/zeon-algebra/)
}
}

}

\subtree[2023]{
\title{Year 2023}
\subtree[2023-09~12]{
\title{September to December, 2023}
\md{
I was working on Lean related projects during this period, my readings are partially reflected in my [Lean 4 Playground](https://utensil.github.io/lean-playground/), but most of the time I was reading [Lean's Zulip Chat messages](https://leanprover.zulipchat.com/). Maybe one day I should archive my stars on Zulip Chat.
}
}
\subtree[2023-02~08]{
\title{February to August, 2023}
\md{
The readings during this period are reflected in

- my [LLM Daily Picks](https://github.com/utensil/llm-playground/blob/main/daily_picks.md)
- my blog post [Transformers: from self-attention to performance optimizations](https://utensil.github.io/blog/posts/transformer/)
}
}
}

}
