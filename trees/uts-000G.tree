\import{tt-macros}
% clifford hopf spin tt ag math draft tech exp
\tag{notes}
\tag{tech}
\tag{draft}

\author{utensil}
\date{2024-08-11}

\mdnote{some links for rendering implicit surfaces}{

# readings: raymarching on implicit surfaces

- \citek{singh2009real} has reviews on related work, an algorithm and many examples. But it has no code.
- [Ray Marching and Signed Distance Functions](https://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/) is a good introduction to ray-marching and signed distance functions, and the author learns from [Inigo Quilez](https://iquilezles.org/).
- [Rendering Worlds with Two Triangles with raytracing on the GPU in 4096 bytes](https://iquilezles.org/articles/nvscene2008/rwwtt.pdf) by Iñigo Quilez in 2008
- [Raymarching Distance Fields](https://9bitscience.blogspot.com/2013/07/raymarching-distance-fields_14.html) in 2013
- [raymarching terrains](https://iquilezles.org/articles/terrainmarching/) by Iñigo Quilez in 2002
- [Volumetric Rendering: Raymarching](https://www.alanzucconi.com/2016/07/01/raymarching/) in 2016
- [Painting with Math: A Gentle Study of Raymarching](https://blog.maximeheckel.com/posts/painting-with-math-a-gentle-study-of-raymarching/) in 2023, which has interative illustration of ray-marching algorithm, and shader examples from simple to complex
- [CUDA Ray Marching](https://granskog.xyz/blog/2017/1/11/cuda-ray-marching/) by Jonathan Granskog
- [Slides on GPU Ray Marching](https://www.cl.cam.ac.uk/teaching/1718/AdvGraph/5.\%20GPU\%20Ray\%20Marching.pdf) by Alex Benton in 2017–18, with more related materials [here](https://www.cl.cam.ac.uk/teaching/1718/AdvGraph/materials.html).
- [Ray Tracing Deterministic 3-D Fractals](https://www.cs.drexel.edu/~deb39/Classes/Papers/rtqjs.pdf) in 1989
- [Ray-marching Thurston geometries in 2022](https://arxiv.org/abs/2010.15801)
- [PU-Ray: Domain-Independent Point Cloud Upsampling via Ray Marching on Neural Implicit Surface](https://arxiv.org/abs/2310.08755) in 2024
- [Ray Tracing Harmonic Functions](https://markjgillespie.com/Research/harnack-tracing/index.html) in 2024
- [Lipschitz-agnostic, efficient and accurate rendering of implicit surfaces](https://link.springer.com/article/10.1007/s00371-023-03216-y) in 2024
- [What is raytracing/raymarching/raycasting](https://microstudio.dev/community/articles/what-is-raytracingraymarchingraycasting/136/)
- [Ray Marching](https://al-ro.github.io/projects/raymarching/) in JS, the source code has a link to the principle behind ray marching shadows: [soft shadows in raymarched SDFs - 2010](https://iquilezles.org/articles/rmshadows/)
- [Raymarching Voxel Rendering](https://medium.com/@calebleak/raymarching-voxel-rendering-58018201d9d6) in 2017
- [UC Berkeley CS184/284A Lecture 9: Ray Tracing & Acceleration Structures](https://cs184.eecs.berkeley.edu/sp24) in 2024
- [Third Year and MSc Interactive Computer Graphics](https://www.doc.ic.ac.uk/~dfg/graphics/graphics2008/graphics2008.html) in 2008
- [Raymarching Distance Fields](https://9bitscience.blogspot.com/2013/07/raymarching-distance-fields_14.html) in 2013
- [Perfecting anti-aliasing on signed distance functions](https://blog.pkh.me/p/44-perfecting-anti-aliasing-on-signed-distance-functions.html) in 2025

# libraries and tools: raymarching on implicit surfaces

- [SURFER](https://github.com/IMAGINARY/SURFER) renders implicit surfaces using ray-tracing, the result is stunning well. It also has a Java library with [many examples](https://github.com/IMAGINARY/jsurf/tree/master/examples).
- [Raycasting Implicit Surfaces](https://cindyjs.org/gallery/main/Raytracer/) based on [CindyJS](https://cindyjs.org/) is Web-based implicit surface renderer using ray-tracing, and the source code is best suited for reproducing and learning. It also has a rich set of examples.
- [Raycasting a surface of degree 4](https://cindyjs.org/examples/cindygl/36_raycasting_kummer.html) is a relatively simpler example of ray-tracing implicit surfaces with source [here](https://github.com/CindyJS/CindyJS/blob/main/examples/cindygl/36_raycasting_kummer.html).
- [mla](https://www.shadertoy.com/user/mla) has a series of shaders from simple to complicated to render the Kummer surface, see [here](https://www.shadertoy.com/results?query=Kummer). mla has also ported a tiny ray tracer [here](https://www.shadertoy.com/view/tsjGRW) which could be a starting point.
- A simpler but more versatile ray-tracer for implicit surfaces is [Implicit surfaces created by Rogolop](https://www.shadertoy.com/view/l3BSRG).
- [3D Bifurcation Diagram](https://compute.toys/view/736)
- [MA1104-implicitplot](https://matkcy.github.io/MA1104-implicitplot.html) has a naive implicit surface plotter.
- [usegpu.live demo of ploting implicit surface](https://usegpu.live/demo/plot/implicit-surface)
- [Surface Plotter](https://github.com/jaxry/surface-plotter) makes use of Paul Bourke's Marching Cubes algorithm with edge table, to turn implicit surfaces into polygonal meshes. See [Marching Cubes](http://algorithm-interest-group.com/assets/slides/marching_cubes.pdf) and its references.

## Implicit reconstruction or polygonization

- [A Heat Method for Generalized Signed Distance](https://nzfeng.github.io/research/SignedHeatMethod/) in 2024
- Robust Creation of Implicit Surfaces from Polygonal Meshes in 2002
- Curvature Dependent Polygonization of Implicit Surfaces in 2004
- Implicit Meshes for Modeling and Reconstruction in 2018
- Differential Geometry in Neural Implicits in 2022
- Differentiable Iterated Function Systems in 2024
- [Adaptive grid generation for discretizing implicit complexes](https://github.com/Jurwen/Adaptive-grid-generation) in 2024
- [SDFGen](https://github.com/christopherbatty/SDFGen): A simple commandline utility to generate grid-based signed distance field (level set) generator from triangle meshes, using code from Robert Bridson's website. Found from [Merging Meshes with Signed Distance Fields](https://www.gradientspace.com/tutorials/2017/11/21/signed-distance-fields-tutorial).
- [sdf](https://github.com/fogleman/sdf): Generate 3D meshes based on SDFs (signed distance functions) with a dirt simple Python API.
- [SDFStudio](https://github.com/autonomousvision/sdfstudio): A Unified Framework for Surface Reconstruction

For learning shaders, see [[uts-000H]].

\todo{Convert some of the links to citations.}

\todo{I would like to have a formal specification of the raymarching algorithm (in [algorithm2e](https://amirsojoodi.github.io/posts/LaTeX-Algorithm2e/) or [algorithmicx+algpseudocode or even algpseudocodex](https://tex.stackexchange.com/questions/229355/algorithm-algorithmic-algorithmicx-algorithm2e-algpseudocode-confused)), and find propositions worth proving.}
}
