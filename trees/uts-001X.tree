\import{macros}

\mdnote{Type Theory}{
Recently I have read [some meta-level dependent type theory](https://ice1000.org/) ([Typst source](https://github.com/ice1000/website/tree/main/dtt-dev)). It might be time to re-read `leantt` paper, and start reading `lean4lean` paper/source.

The author `ice1000` has strong interest in QIIT (Quotient Inductive-Inductive Types) and QIIR (Quotient Inductive-Inductive Recursion), he has [implemented `overlap` in Aya](https://github.com/aya-prover/aya-dev/pull/1042) with [termination check and confluence check](https://github.com/aya-prover/aya-dev/blob/main/cli-impl/src/test/resources/negative/PatCohError.txt).

Aya has a philosophy that the kernel could include pattern matching, but at the cost of no generation and translation of eliminators at present. In principle this is feasible, without `overlap`, it could be implemented by "theory of signatures", with `overlap`, it needs "Coherent and concurrent elimination for initial algebras" which I find fascinating, and have read \citek{yeasin2011initial}.

The author also has a great article on TT & Cat \citek{zhang2021type}. His recommendation of \citek{gundry2013tutorial} is also worth reading.

In the process of learning Topos, I wish to have a better understanding of Logic. Particularly, [Curry–Howard–Lambek correspondance](\verb!|https://www.bananaspace.org/wiki/%E7%B1%BB%E5%9E%8B%E8%AE%BA%E2%80%93%E8%8C%83%E7%95%B4%E8%AE%BA%E2%80%93%E9%80%BB%E8%BE%91%E5%AD%A6%E7%B1%BB%E6%AF%94!), [Propositional truncation](https://1lab.dev/1Lab.HIT.Truncation.html#propositional-truncation), and [Paraconsistent logic](https://en.wikipedia.org/wiki/Paraconsistent_logic) are on the plate.

Although remotely related, I'll place [Introduction to Formal Reasoning (COMP2065)](http://www.cs.nott.ac.uk/~psztxa/comp2065.23-24.ifr-notes/_build/html/index.html#) in this section so I won't lose track of it.
}
